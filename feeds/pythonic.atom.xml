<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title></title><link href="http://blog.zoomquiet.io/" rel="alternate"></link><link href="http://blog.zoomquiet.io/feeds/pythonic.atom.xml" rel="self"></link><id>http://blog.zoomquiet.io/</id><updated>2016-04-15T00:00:00+08:00</updated><entry><title>Leo 5.2 theme custom</title><link href="http://blog.zoomquiet.io/leo5theme.html" rel="alternate"></link><updated>2016-04-15T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-04-15:leo5theme.html</id><summary type="html">
&lt;h1 id="en"&gt;&lt;span class="caps"&gt;EN&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;thanks guys in &lt;code&gt;leo-editor@googlegroups.com&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terry Brown&lt;/li&gt;
&lt;li&gt;john lunzer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;make me know how to custom Leo theme step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;old versions &lt;code&gt;myLeoSettings.leo&lt;/code&gt; appended buttons :&lt;ul&gt;
&lt;li&gt;at &lt;code&gt;leo/myLeoSettings.leo#Startup--&amp;gt;Local buttons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;need copy from  &lt;code&gt;leoSettings.leo&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;so my custome flow as:&lt;ul&gt;
&lt;li&gt;try edit some node&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;reload-styles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;open other &lt;code&gt;.leo&lt;/code&gt; , check effect&lt;/li&gt;
&lt;li&gt;close it&lt;/li&gt;
&lt;li&gt;loop up steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;finally all i custom in  &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;appended help menus:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Menus--&amp;gt;@menus--&amp;gt;@menu &amp;amp;Help--&amp;gt;@item open-myLeoSettings-leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bigger cursor:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Qt Gui Misc settings--&amp;gt;@int qt-cursor-width = 6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;font changed:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Fonts--&amp;gt;Basic Fonts (change these first)--&amp;gt;@string font-family = Input, Droid Sans Mono, DejaVu Sans Mono&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;body-bg dark:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Body pane colors--&amp;gt;@color body-bg = #2F3337&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close Gutter:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Margins &amp;amp; borders--&amp;gt;Gutter--&amp;gt;@bool use-gutter = False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;custom border-focus-color:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Border colors--&amp;gt;@color focused-border-focus-color = #85C2FF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python syntax coloring:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Syntax coloring--&amp;gt;Language-specific colors--&amp;gt;Python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appended nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@color blank_color = grey
@color tab_color = red
@color label_color = red
@color keyword1_color = #268bd2
@color keyword2_color = #2aa198
@color keyword3_color = #859900
@color keyword4_color = #268bd2
@color literal1_color = #cb4b16
@color literal2_color = #b58900
@color literal3_color = #dc322f
@color literal4_color = #859900
@color markup_color = #2aa198
@color comment1_color = #557755
@color comment2_color = #557755
@color comment3_color = #557755
@color comment4_color = #557755
@color operator_color = #bbbbbb
@color function_color = #cb4b16
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; with coloring&lt;ul&gt;
&lt;li&gt;fixed &lt;code&gt;path/2/installed/leo/modes/python.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;appended &lt;code&gt;"self": "keyword4",&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;是也乎&lt;/h1&gt;
&lt;p&gt;~ 老问题新解决&lt;/p&gt;
&lt;h2 id="_2"&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/leo_toc.html"&gt;Leo&lt;/a&gt; &lt;img alt="Leo4" src="http://leoeditor.com/_static/Leo4-80-border.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="http://wiki.woodpecker.org.cn/moin/LeoEnvironment"&gt;LeoEnvironment - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从 05 年开始使用&lt;/li&gt;
&lt;li&gt;从笔记到工程管理,都用的非常欢实&lt;/li&gt;
&lt;li&gt;是 令德华(&lt;a href="http://leoeditor.com/ekr.html"&gt;Edward K. Ream&lt;/a&gt;) 独立创建并长期维护的,完备的文学化编辑环境&lt;/li&gt;
&lt;li&gt;09年从 Tk 迁移到 Qt 后平滑的跟随俺转战 M$/Ubuntu/&lt;span class="caps"&gt;MAC&lt;/span&gt; 所有桌面系统&lt;/li&gt;
&lt;li&gt;嗯哼,完全基于 Python 开发的…&lt;/li&gt;
&lt;li&gt;详细介绍,参考 &lt;a href="http://zoomq.qiniudn.com/pychina/PyCon2013China/PyConChina2013-EKR-final-v2"&gt;PyConChina2013-&lt;span class="caps"&gt;EKR&lt;/span&gt;-final-v2&lt;/a&gt; ~ 老令公 在 PyCon2013China 大会上分享的视频&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;问题&lt;/h2&gt;
&lt;p&gt;但是,使用最性感的编辑器 sublime text 后, 对 Leo 默认的界面就万般难以忍受了…&lt;/p&gt;
&lt;p&gt;终于决心折腾一下样式!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leo 基于几个配置文件:&lt;ul&gt;
&lt;li&gt;默认配置 &lt;code&gt;path/2/installed/Leo/config/leoSettings.leo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户配置 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;俺从 3.1 版本开始使用 Leo, 现在的稳定版本是 5.2&lt;/li&gt;
&lt;li&gt;所以, &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 和官方的默认有较大偏差&lt;/li&gt;
&lt;li&gt;那么如何解决:&lt;ul&gt;
&lt;li&gt;启用&lt;a href="http://leoeditor.com/what-is-new.html#what-s-new-in-leo-4-11"&gt;Leo 4.11&lt;/a&gt; 开始有的 &lt;code&gt;sublime Text 2, a dark colorizing theme&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;如何令 &lt;code&gt;self&lt;/code&gt; 也有语法颜色?&lt;/li&gt;
&lt;li&gt;如何改变默认的 &lt;code&gt;cursor&lt;/code&gt; 尺寸?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;过程&lt;/h2&gt;
&lt;p&gt;简单的说,手上的配置文件有这几种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 混杂了增补多年配置的可能不兼容配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/leoSettings.leo&lt;/code&gt; 5.2 最新版本配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/exampleSettings.leo&lt;/code&gt; 5.2 内置配置示例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path/2/installed/Leo/config/themes.leo&lt;/code&gt; 5.2 内置 theme 定制示例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先后进行的尝试:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;exampleSettings.leo&lt;/code&gt; 基础上&lt;ul&gt;
&lt;li&gt;先完成积累的习惯配置&lt;/li&gt;
&lt;li&gt;再进行 theme 配置&lt;/li&gt;
&lt;li&gt;失败! 原先的配置点太多:&lt;ul&gt;
&lt;li&gt;快捷键&lt;/li&gt;
&lt;li&gt;窗口布局&lt;/li&gt;
&lt;li&gt;字体&lt;/li&gt;
&lt;li&gt;颜色&lt;/li&gt;
&lt;li&gt;菜单…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;leoSettings.leo&lt;/code&gt; 基础上&lt;ul&gt;
&lt;li&gt;先完成积累的习惯配置&lt;/li&gt;
&lt;li&gt;再进行 theme 配置&lt;/li&gt;
&lt;li&gt;失败! 原因同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终只好一边询问社区列表,一边基于 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 进行配置&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;leoSettings.leo&lt;/code&gt; 复制相应最新配置树过来&lt;/li&gt;
&lt;li&gt;参考原先的进行对应配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;要点&lt;/h2&gt;
&lt;p&gt;~成功将 &lt;img alt="leoeditor" src="http://leoeditor.com/screen-shots/render-svg-sources.png"/&gt;
变成:
&lt;img alt="leo5.2_darktheme" src="http://zoomq.qiniudn.com/ZQCollection/snap/leo/leo5.2_darktheme.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo&lt;/code&gt; 的控制按钮:&lt;ul&gt;
&lt;li&gt;来自 &lt;code&gt;leo/myLeoSettings.leo#Startup--&amp;gt;Local buttons&lt;/code&gt;, 要从  &lt;code&gt;leoSettings.leo&lt;/code&gt; 复制&lt;/li&gt;
&lt;li&gt;这样进行之后的配置尝试时的流程才能固化为:&lt;ul&gt;
&lt;li&gt;进行对应 node 的修订&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;reload-styles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开另外一个 &lt;code&gt;.leo&lt;/code&gt; 观察效果&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;li&gt;重复以上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关 &lt;code&gt;~/.leo/myLeoSettings.leo&lt;/code&gt; 的配置点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加帮助菜单:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Menus--&amp;gt;@menus--&amp;gt;@menu &amp;amp;Help--&amp;gt;@item open-myLeoSettings-leo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;光标加粗:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Qt Gui Misc settings--&amp;gt;@int qt-cursor-width = 6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字体指定:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Fonts--&amp;gt;Basic Fonts (change these first)--&amp;gt;@string font-family = Input, Droid Sans Mono, DejaVu Sans Mono&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编辑窗口底色:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Body pane colors--&amp;gt;@color body-bg = #2F3337&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭行数:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Margins &amp;amp; borders--&amp;gt;Gutter--&amp;gt;@bool use-gutter = False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修订窗格激活提醒框&lt;ul&gt;
&lt;li&gt;&lt;code&gt;myLeoSettings.leo#@settings--&amp;gt;Appearance (change these first)--&amp;gt;Qt Gui settings--&amp;gt;Colors--&amp;gt;Border colors--&amp;gt;@color focused-border-focus-color = #85C2FF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 语法颜色自定:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#@settings--&amp;gt;Syntax coloring--&amp;gt;Language-specific colors--&amp;gt;Python&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逐一追加 node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@color blank_color = grey
@color tab_color = red
@color label_color = red
@color keyword1_color = #268bd2
@color keyword2_color = #2aa198
@color keyword3_color = #859900
@color keyword4_color = #268bd2
@color literal1_color = #cb4b16
@color literal2_color = #b58900
@color literal3_color = #dc322f
@color literal4_color = #859900
@color markup_color = #2aa198
@color comment1_color = #557755
@color comment2_color = #557755
@color comment3_color = #557755
@color comment4_color = #557755
@color operator_color = #bbbbbb
@color function_color = #cb4b16
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt; 非关键词追加语法颜色&lt;ul&gt;
&lt;li&gt;修订 &lt;code&gt;path/2/installed/leo/modes/python.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;追加 &lt;code&gt;"self": "keyword4",&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感谢 &lt;code&gt;leo-editor@googlegroups.com&lt;/code&gt; 列表中好人的大力帮助:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terry Brown&lt;/li&gt;
&lt;li&gt;john lunzer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="timing"&gt;timing&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 1.5h 根据记忆折腾
+ .5h 官方列表提问
+ 2h 使用官方配置折腾
+ 1h 使用列表提示检验
+ .5h 完成心目中的配置

~ 6h 才完成...
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;140909 才算完成一个可以看的版本&lt;/li&gt;
&lt;li&gt;140711 完成所有功能,启动文档回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;subl theme 到 Leo theme 的转换脚本&lt;/li&gt;
&lt;li&gt;进一步的样式化:&lt;ul&gt;
&lt;li&gt;髙亮当前行&lt;/li&gt;
&lt;li&gt;提纲界面的 dark theme&lt;/li&gt;
&lt;li&gt;log 界面的 dark theme&lt;/li&gt;
&lt;li&gt;find 界面的 dark theme&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考颜色: &lt;a href="http://leo-editor.github.io/snippets/colormap.html"&gt;Leo Color Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="howto"></category><category term="leo"></category><category term="theme"></category></entry><entry><title>Linux 后的思想</title><link href="http://blog.zoomquiet.io/linux-linus-not-only-be-fun.html" rel="alternate"></link><updated>2016-04-10T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2016-04-10:linux-linus-not-only-be-fun.html</id><summary type="html">
&lt;p&gt;来自 &lt;span class="caps"&gt;TED2016&lt;/span&gt; 的分享:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux"&gt;Linus Torvalds: The mind behind Linux | &lt;span class="caps"&gt;TED&lt;/span&gt; Talk | &lt;span class="caps"&gt;TED&lt;/span&gt;.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;戳中泪点的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有项目,只是因为我需要&lt;/li&gt;
&lt;li&gt;最困难的不是完成大项目,而是令人们在一起工作,即使相互不接受&lt;/li&gt;
&lt;li&gt;Linux 并不是选择了开源,只是那时刚好有开源吻合 Linux 项目&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的,为什么 Linux 发展的如此快,而更加早的 &lt;span class="caps"&gt;GNU&lt;/span&gt; 项目反而越来越没有存在感了!?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RMS&lt;/span&gt; 太聪明,总是戳到关键点&lt;/li&gt;
&lt;li&gt;Linus 明智的多,只作自己能控制的,其它的给更加聪明的人折腾吧&lt;/li&gt;
&lt;li&gt;嗯哼,这就是失控控制法&lt;/li&gt;
&lt;li&gt;不控制的控制才是最好的控制&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</summary><category term="geek"></category><category term="linux"></category><category term="floss"></category><category term="linux"></category></entry><entry><title>为毛俺不担心所谓Python用户流失</title><link href="http://blog.zoomquiet.io/saying-ggodby-python-zh.html" rel="alternate"></link><updated>2015-01-10T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2015-01-10:saying-ggodby-python-zh.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;Saying Goodbye&amp;nbsp;To Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is long overdue; this isn’t a declaration of intent (any intent was long ago made real), just my reflection about my own path. I left the Python world a long time ago but I never took a chance to say&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;While I had moved on from Python years ago, I felt a certain attachment to it well past then, not quite admitting to myself that I wasn’t coming back. When my proposal for PyCon 2013 was rejected I was frustrated (it was going to be a fun talk!) but for some reason that made me fully realized that I wasn’t part of the Python community&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;Python was the first — and I sometimes wonder if the only — programming community I was part of. Coming to Python was a conscious choice. In college I was interested in Scheme and Smalltalk. High-minded languages with interesting ideas, but hard to find practical uses. Scheme was always too underserved by its libraries and sparse academic community. In contrast Smalltalk was productive — it was built by and for people who loved to build things. (More credit here should probably go to Dan Ingalls than Alan Kay — I can sense in Dan Ingalls’s work a real passion for making things, and a pure but unproductive language would not have satisfied him.) But Smalltalk was and is a world of its own. It was culturally and technically pre-internet, pre-open-source, pre-online-community. And despite all the great things about the Smalltalk environment and language it couldn’t fulfill these then-new potentials, even as it tried to adapt. (I wrote a couple posts about this, intended as a sort of sympathetic explanation of why I couldn’t stick with Smalltalk: Where Smalltalk Went Wrong and a&amp;nbsp;followup.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;Dan&amp;nbsp;Ingalls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan&amp;nbsp;Kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong.html"&gt;Where Smalltalk Went&amp;nbsp;Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong-2.html"&gt;a&amp;nbsp;followup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of my college career (1999ish) I consciously looked for a new home. I flirted with Perl, C, but knew they weren’t for me. Somewhere along the way I came upon Python, and it was good enough that I didn’t look for anything better. I can’t say I fell in love with Python like I had with Scheme and Smalltalk — Scheme was like an opening up of the world after going far beyond what anyone should ask of &lt;span class="caps"&gt;GW&lt;/span&gt;-&lt;span class="caps"&gt;BASIC&lt;/span&gt;, and Squeak/Smalltalk was a deep mysterious world, like coming upon the ruins of an ancient and advanced civilization. Python in comparison was practical — but I wasn’t in the mood at that time to discover, I wanted to&amp;nbsp;build.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/GW-BASIC"&gt;&lt;span class="caps"&gt;GW&lt;/span&gt; - &lt;span class="caps"&gt;BASIC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I built a lot of things in Python. I was doing workaday web programming and my enthusiasm went more towards building tools to build stuff than in the building itself. I did build some cool products in those days, not just libraries, but for some reason it’s only the smaller units that I was able to push out. And I found a community in&amp;nbsp;Python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ianbicking.org/projects.html"&gt;built a lot of things in&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I built. Back in the days I contributed to Webware, what felt like a completely different generation of web development in Python than today. I wrote SQLObject, my first foray into a oh-shit-people-are-using-this-I’m-not-sure-how-I-feel-about-that library. But SQLObject explored a lot of metaprogramming concepts that were quite novel in the Python world at that time. At the same time maintaining it felt like a terrible burden. It took me far too long to resolve that, and only once interest had died down (in no small part due to my lack of attention) did I hand it over to Oleg who has been a far more steady hand. This would be a pattern I would unfortunately repeat. But if SQLObject helped the next generation be better that’s good enough for&amp;nbsp;me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.webwareforpython.org/"&gt;Webware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phdru.name/"&gt;Oleg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sqlalchemy.org/"&gt;next&amp;nbsp;generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later came &lt;span class="caps"&gt;WSGI&lt;/span&gt; which excited me with its subtly functional basis. I built a whole web framework toolkit (or a framework for building web frameworks?) in Paste. Few people really understood what I was trying to do with Paste — at times including me. Some people like Ben Bangert were able to see the principles underneath the code, and get them out into the world in the kind of usable state that I intended to enable. (And along the way I sometimes felt like I was doing the same for &lt;span class="caps"&gt;PJE&lt;/span&gt;.) Python web frameworks were a mess back then; ultimately reaching for the crown using a monolithic approach was a more successful technique than trying to build bridges as I attempted with Paste. I’m still not sure what lesson to take from that. Not a general lesson, but more understanding the landscape. And understanding what you can bring to a problem, and who you can bring with. I feel like I’m only now really understanding the importance of vision combined with a diverse group of skills and perspectives, and I have even more to learn about how to actually assemble and coordinate the right group of people in the right environment to&amp;nbsp;succeed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wsgi.readthedocs.org/"&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/"&gt;Paste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://groovie.org/"&gt;Ben&amp;nbsp;Bangert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;reaching for the&amp;nbsp;crown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Somewhere around here I feel like I reached my 10,000 hours of Python coding. I wrote WebOb, taking the lessons of Paste and a better intuition for library design. I still think it’s the best mapping of &lt;span class="caps"&gt;HTTP&lt;/span&gt; to Python. Other libraries include more aspects of web development in their scope, or have better documentation, and more users, but when viewed with a particular lens I’m still very proud of WebOb. And it’s been an important building block in a lot of people’s explorations into building a web framework. Other libraries from this period are lxml.html, smaller things like WebTest, ScriptTest, MiniMock, Tempita, perhaps the over-ambition (or just mis-ambition) of Deliverance. That period felt like a clearing out of my system, unloading a bunch of&amp;nbsp;ideas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webob.org/"&gt;WebOb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.webob.org/en/latest/do-it-yourself.html"&gt;building a web&amp;nbsp;framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxml.de/lxmlhtml.html"&gt;lxml.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webtest.pythonpaste.org/"&gt;WebTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/scripttest/"&gt;ScriptTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/MiniMock"&gt;MiniMock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonpaste.org/tempita/"&gt;Tempita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.coactivate.org/projects/deliverance/introduction"&gt;Deliverance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for whatever reason my most successful tools were virtualenv and pip. These were never my greatest passions, or even close. They were about: (a) fixing personal annoyances in deployment (virtualenv), and (b) getting people to stop fucking whining about Setuptools and easy_install (pip). I’m not sure whether I blame the uneasy success of these tools on broad appeal, or that they are in a sense user-visible tools and not libraries, or that I didn’t like doing them because no one liked doing them and so there was a vacuum waiting to be&amp;nbsp;filled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then my last project, Silver Lining. It was early on in the devops revolution, an attempt to think about what a generic container for web applications might look like. It was in a sense going deeper down the hole of virtualenv and pip, but with an aim to build a full product and not just a set of eclectic tools. No one cared. And I only cared a little — I cared because it was completing some ideas I’d long had about deployment, because for a certain kind of web application development it felt nimble and reliable, because it removed or automated tasks I didn’t like to do. But I didn’t care, no more than I cared about virtualenv or pip. I’d gone down a path that was about code and technical design, but if I stepped back it was&amp;nbsp;unexciting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ianb/silverlining/src"&gt;Silver&amp;nbsp;Lining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And when I did step back there wasn’t anything in Python that excited me. Python was doing great, my interest had nothing to jumping on or off bandwagons. Python is doing great — better than ever (minor bumps with versions aside). But I think in my mind I’d always imagined I could build up just the right toolset, and using that toolset create the product I actually wanted to create — what exactly that product was, I don’t know, but with the right tools I imagined I could move fast enough and confidently enough to find&amp;nbsp;it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/+IanBicking/posts/iEVXdcfXkz7"&gt;minor bumps with versions&amp;nbsp;aside&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes when I’m feeling particularly excited about an idea, like really excited, I have to take a break. I need to calm down. Try to wrap my head around the ideas, because I know if I push forward directly that I’ll just muddle things up and feel disappointed. No, I don’t know that is true: maybe I don’t want to have to confront, in that moment, that the idea is not as cool as I think it is, or as possible as I think it is. But often I do step back into the problem, with ideas that are more mature for having thought more deeply about them. In a sense I think creating tools and libraries was a similar process: I felt too excited about creating something great, because I worried I’d muddle everything up, or afraid I just couldn’t pull it off, and so I stepped away and would work on&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;I always directed my attention to the web, even if I got bogged down in the server. Somehow I skipped native GUIs, even as a user. But pure data processing without consideration for what you do with the data felt unexciting. And ops — that’s just the worst. I was, and am, a true believer in Free Software; and I was, and am, a true believer in the web. That is, I don’t see either as simply a means to an ends. But not for the same reasons, and I can believe in a web that isn’t open source, and open source that isn’t for the web. And yet writing it down I realize I don’t care about open source that isn’t for the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;When I stepped back Python no longer seemed relevant to the web, at least not the part of the web that interested me. The tools I had built were no longer relevant either, they were not the tools with which I could realize my ambitions. The database-backed website, or the dynamic-&lt;span class="caps"&gt;HTTP&lt;/span&gt;-based web application, templates and deployments, anything you’d call “&lt;span class="caps"&gt;REST&lt;/span&gt;” — none of it seemed like the future, and whatever this vague thing was that I’d been looking for, I wasn’t going to find it&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;This wasn’t an actual revelation, I’m constructing it in retrospect. If you’d asked me I would have agreed with this notion even years earlier, and it’s not like I came up with some unique idea, if anything I would call it self-evident, don’t we all know this is where the world is going? And so I started to look towards Javascript and the browser and the &lt;span class="caps"&gt;DOM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Somewhat before this I also joined Mozilla. But it would be backwards to say that Mozilla induced this change in perspective, that it tempted me away from Python. In fact I would have had a much easier time of it if I had just stuck with doing Python backend stuff at&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;The last few years of transition have been a struggle. With Python and the server I knew what I was doing. I was good at it, I felt competent. I could construct an opinion with confidence about all kinds of design questions. I was respected and my opinion would be listened to. I’d put in my 10,000 hours, I had achieved&amp;nbsp;mastery.&lt;/p&gt;
&lt;p&gt;Moving to Javascript none of this was true, and most of it still isn’t true. It might be easier to pull off this change if I was doing web development, surrounded with people making similar transitions, a little fish in the little pond of whatever group I was working with. But Mozilla is not that kind of environment. Which is okay — if I had felt confident it would only be because there was no one to correct&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;It’s oddly common to see people talk about how a programmer can pick up something new in the matter of a few days or months. To find programmers that consider all that knowledge transferable (for instance). I don’t know what to make of it — my less forgiving self thinks these people have never known what real mastery is. I don’t think it takes another 10,000 hours to get mastery in a new language and environment… but it definitely takes some thousands of hours, some years of hard work. I only now feel like I’m getting&amp;nbsp;close.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=7204515"&gt;for&amp;nbsp;instance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maybe it’s my perspective on what mastery is. Deciding to do something and then doing it is good. It is not mastery. You have to pick the right problem to solve. You have to pick the right way to solve it. You need to know when to revise that plan, and understand the constraints that inform that revision. You need both large scale and small scale intuitions. And you need to be good enough at all the details of programming in that environment that you don’t get overwhelmed with the “easy” stuff, so you have mental energy to spare on the big stuff. The jump from Python to Javascript isn’t that big, the languages have a very similar shape. And the browser was already the environment focused on. And yet redeveloping my intuition for this new environment has taken&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Sadly I’m not going to get back where I was, because Javascript is not Python. If there’s a Javascript community I haven’t found it, or it’s at least not a single entity. There is no community that created Javascript like the Python community created Python. Python comes from the internet in a way Javascript does not; Javascript was built for the internet, but Python was built on the internet. And I do miss the Python community, you’re good&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;But also whatever language partisanship I had is gone, and won’t come back in the guise of a new favorite language. This shouldn’t be confused with a disinterest in language. I still get as annoyed as ever by “use the right tool for the job” — the bland truism meant to shut down critical discussion and engagement with the tasks and choices in software engineering, replacing it with a weak passionless technical&amp;nbsp;fatalism.&lt;/p&gt;
&lt;p&gt;I suppose it is the platform that I am drawn to now before language. And the browser seems like the most interesting platform, not because it’s novel (though it is, it’s a runtime like few others), but because of how concrete it is, and of course how relevant it is to… anything. And the browser is no longer just the servant of a server, I prefer now to think of the browser as an independent agent, connecting to services instead of servers. Obviously that doesn’t describe a great number of running web sites, but it’s the model I see for the future, and a better perspective for understanding future&amp;nbsp;architectures.&lt;/p&gt;
&lt;p&gt;Still this only addresses which direction I’m looking towards, I still have to walk the path. I don’t want to get caught up in the weeds again, building tools for something I never manage to make. Right now I think I’m on to something in the area of collaboration, first with TogetherJS and now I’m thinking bigger with a new experiment. But while I feel like I’ve reached some competence in executing on these projects, programming is only one piece of bringing forward a larger vision. I still have a lot of learning to do, skills for which I haven’t put in the necessary time. How to recruit support, how to manage the project, how to negotiate between feasibility and user value, how to negotiate compromises in strategy and design. And collaboration itself is a whole domain of expertise. I’ve learned a lot, I can do things, but I am definitely not yet experienced enough to choose to do the right thing in these areas. And at this moment I’m worried I won’t have the room to learn these things, it feels like time is running out just when I’m pulling stuff&amp;nbsp;together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/mozilla/hotdish"&gt;new&amp;nbsp;experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, that’s where I am now. No longer a language partisan, unclear of what community I am even participating in, I am less sure how to identify and self-identify myself. How do I describe myself now? Even as I find my technical footing I am still adrift. And so it’s hard to say goodbye. So instead I’ll say, Pythonistas: until we meet again. Maybe I’ll meet some of you over&amp;nbsp;here.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;150112 整理到个人&amp;nbsp;blog&lt;/li&gt;
&lt;li&gt;150110&amp;nbsp;从周刊中发现,决定翻译&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Weekly"></category><category term="Zh"></category></entry><entry><title>如何将 ipynb 发布到 blog 中?</title><link href="http://blog.zoomquiet.io/141127-ipynb-into-blog.html" rel="alternate"></link><updated>2014-11-27T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-11-27:141127-ipynb-into-blog.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/how-to-quickly-turn-ipython-notebook.html"&gt;prooffreader plus: How to quickly turn an IPython notebook into a blog&amp;nbsp;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IPython notebooks are great for many things, but they&amp;#8217;re a little awkward to embed in blog post platforms like Blogger, Wordpress, etc. When the nbconvert feature was a standalone command-line tool, there was a blog export template, but that seems to have disappeared now that nbconvert has been folded within&amp;nbsp;IPython.&lt;/p&gt;
&lt;p&gt;Out of the box, nbconvert just has two html export&amp;nbsp;options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which includes a lot of &lt;span class="caps"&gt;CSS&lt;/span&gt; that interferes with a blog&amp;#8217;s &lt;span class="caps"&gt;CSS&lt;/span&gt;,&amp;nbsp;and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--html --template basic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which has no &lt;span class="caps"&gt;CSS&lt;/span&gt; and so pretty much negates the benefit of using an IPython notebook. However, it does have &lt;span class="caps"&gt;CSS&lt;/span&gt; classess in the&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;My solution was to whip up a quick &lt;span class="caps"&gt;CSS&lt;/span&gt; stylesheet that could be included in the blog post. It seems to work pretty well; you can have a look&amp;nbsp;at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an &lt;a href="http://nbviewer.ipython.org/github/Prooffreader/Misc_ipynb/blob/master/top_10_python_idioms.ipynb"&gt;IPython notebook in nbviewer&lt;/a&gt; of a recent blog post of&amp;nbsp;mine&lt;/li&gt;
&lt;li&gt;the &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/top-10-python-idioms-i-wished-id.html"&gt;blog version&lt;/a&gt; after applying this&amp;nbsp;stylesheet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that, for aesthetic reasons, I removed all&amp;nbsp;the&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-style tags because of the narrow columns on this blog. Your mileage may&amp;nbsp;vary.&lt;/p&gt;
&lt;h2 id="1-convert-ipynb-notebook-to-html"&gt;1. Convert .ipynb notebook to &lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;In the terminal, navigate to the folder containing the .ipynb file and&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython nbconvert --to html --template basic filename.ipynb
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="2-paste-html-in-blog"&gt;2. Paste &lt;span class="caps"&gt;HTML&lt;/span&gt; in&amp;nbsp;blog&lt;/h2&gt;
&lt;p&gt;Note: if you&amp;#8217;re using the Blogger platform, never switch back to the Compose interface after you use the &lt;span class="caps"&gt;HTML&lt;/span&gt; interface, it changes all your&amp;nbsp;tags.&lt;/p&gt;
&lt;h2 id="3-add-css-to-blog-html"&gt;3. Add &lt;span class="caps"&gt;CSS&lt;/span&gt; to blog &lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This seems to reproduce the native syntax highlighting of&amp;nbsp;IPython.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
.highlight{background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .1em;padding:0em .5em;border-radius: 4px;}
.k{color: #338822; font-weight: bold;}
.kn{color: #338822; font-weight: bold;}
.mi{color: #000000;}
.o{color: #000000;}
.ow{color: #BA22FF;  font-weight: bold;}
.nb{color: #338822;}
.n{color: #000000;}
.s{color: #cc2222;}
.se{color: #cc2222; font-weight: bold;}
.si{color: #C06688; font-weight: bold;}
.nn{color: #4D00FF; font-weight: bold;}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;是也乎&lt;/h2&gt;
&lt;p&gt;原未 &lt;code&gt;IPy[:] notebook&lt;/code&gt; 天然就内置了这种能力!&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;160322 @&lt;span class="caps"&gt;TANG&lt;/span&gt; ZhiXiong 提醒:&lt;ul&gt;
&lt;li&gt;其实放在 GitHub，然后分享一个 Jupyter&amp;nbsp;链接是最好的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;是也乎&lt;/code&gt; 这的确是 2015-7 之后更好的解决方案了&amp;nbsp;;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131106 pub. &lt;a href="https://medium.com/i-m-h-o/9520fee0b59f"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt; to Chinese programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pythonic"></category><category term="FW"></category><category term="ipynb"></category><category term="tutorial"></category></entry><entry><title>十大早该知道的Python技巧</title><link href="http://blog.zoomquiet.io/top10-Py-idioms-wish-learned-earlier.html" rel="alternate"></link><updated>2014-11-26T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-11-26:top10-Py-idioms-wish-learned-earlier.html</id><summary type="html">&lt;p&gt;原文: &lt;a href="http://prooffreaderplus.blogspot.ca/2014/11/top-10-python-idioms-i-wished-id.html"&gt;prooffreader plus: Top 10 Python idioms I wish I&amp;#8217;d learned&amp;nbsp;earlier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Top 10 Python idioms I wish I'd learned earlier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been programming all my life, but never been a programmer. Most of my work was done in Visual Basic because it&amp;#8217;s what I was most comfortable with, plus a smattering of other languages (R, C, JavaScript, etc&amp;#8230; Pascal, Applescript, Hypertext and &lt;span class="caps"&gt;BASIC&lt;/span&gt;, which I learned in 1979, if you go far back enough). A couple of years ago, I decided to use Python exclusively so that I could improve my coding. I ended up re-inventing many wheels &amp;#8212; which I didn&amp;#8217;t mind too much, because I enjoy solving puzzles. But sometimes it&amp;#8217;s good to have a more efficient, Pythonesque approach, and time after time I found myself having &amp;#8220;aha!&amp;#8221; moments, realizing I&amp;#8217;d been doing things the hard, excessively verbose way for no reason. Here is a list of ten Python idioms that would have made my life much easier if I&amp;#8217;d thought to search for them early&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Missing from this list are some idioms such as list comprehensions and lambda functions, which are very Pythonesque and very efficient and very cool, but also very difficult to miss because they&amp;#8217;re mentioned on StackOverflow every other answer! Also ternary x if y else z constructions, decorators and generators, because I don&amp;#8217;t use them very&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also an 
&lt;a href="http://nbviewer.ipython.org/github/Prooffreader/Misc_ipynb/blob/master/top_10_python_idioms.ipynb"&gt;IPython notebook nbviewer version&lt;/a&gt; of this document if you&amp;nbsp;prefer.&lt;/p&gt;
&lt;h2 id="1-python-3-style-printing-in-python-2"&gt;1. Python 3-style printing in Python&amp;nbsp;2&lt;/h2&gt;
&lt;p&gt;One of the things that kept me from concentrating on Python was this whole version 2 - version 3 debacle. Finally I went with Python 2 because all the libraries I wanted were not 3-compatible, and I figured if I needed to, I would laboriously adjust my code&amp;nbsp;later. &lt;/p&gt;
&lt;p&gt;But really, the biggest differences in everyday programming are printing and division, and now I just import from future. Now that almost all the libraries I use heavily are v3-compliant, I&amp;#8217;ll make the switch&amp;nbsp;soon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python 2:&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The number is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Python 3:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The number is {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mynumber&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python 2:
The number is 5
2 2

Python 3:
The number is 5
2.5 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, and here&amp;#8217;s an easter egg for C&amp;nbsp;programmers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ipython-input-3-2aebb3fc8ecf&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;chance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="2-enumeratelist"&gt;2.&amp;nbsp;enumerate(list)&lt;/h2&gt;
&lt;p&gt;It might seem obvious that you should be able to iterate over a list and its index at the same time, but I used counter variables or slices for an embarrassingly long&amp;nbsp;time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mylist = [&amp;quot;It&amp;#39;s&amp;quot;, &amp;#39;only&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;model&amp;#39;]

for index, item in enumerate(mylist):
    print(index, item)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 It&amp;#39;s
1 only
2 a
3 model
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="3-chained-comparison-operators"&gt;3. Chained comparison&amp;nbsp;operators&lt;/h2&gt;
&lt;p&gt;Because I was so used to statically typed languages (where this idiom would be ambiguous), it never occurred to me to put two operators in the same expression. In many languages, 4 &amp;gt; 3 &amp;gt; 2 would return as False, because (4 &amp;gt; 3) would be evaluated as a boolean, and then True &amp;gt; 2 would be evaluated as&amp;nbsp;False.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mynumber = 3

if 4 &amp;gt; mynumber &amp;gt; 2:
    print(&amp;quot;Chained comparison operators work! \n&amp;quot; * 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Chained comparison operators work! 
Chained comparison operators work! 
Chained comparison operators work!
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="4-collectionscounter"&gt;4.&amp;nbsp;collections.Counter&lt;/h2&gt;
&lt;p&gt;The collections library is, like, the best thing ever. Stackoverflow turned me on to ordered dicts early on, but I kept using a snippet to create dicts to count occurrences of results in my code. One of these days, I&amp;#8217;ll figure out a use for&amp;nbsp;collections.deque.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="n"&gt;mycounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;random_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mycounter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mycounter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 10
1 10
2 13
3 6
4 6
5 11
6 10
7 14
8 12
9 8
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="5-dict-comprehensions"&gt;5. Dict&amp;nbsp;comprehensions&lt;/h2&gt;
&lt;p&gt;A rite of passage for a Python programmer is understanding list comprehensions, but eventually I realized dict comprehensions are just as useful &amp;#8212; especially for reversing&amp;nbsp;dicts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_phrase = [&amp;quot;No&amp;quot;, &amp;quot;one&amp;quot;, &amp;quot;expects&amp;quot;, &amp;quot;the&amp;quot;, &amp;quot;Spanish&amp;quot;, &amp;quot;Inquisition&amp;quot;]
my_dict = {key: value for value, key in enumerate(my_phrase)}
print(my_dict)
reversed_dict = {value: key for key, value in my_dict.items()}
print(reversed_dict)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;#39;Inquisition&amp;#39;: 5, &amp;#39;No&amp;#39;: 0, &amp;#39;expects&amp;#39;: 2, &amp;#39;one&amp;#39;: 1, &amp;#39;Spanish&amp;#39;: 4, &amp;#39;the&amp;#39;: 3}
{0: &amp;#39;No&amp;#39;, 1: &amp;#39;one&amp;#39;, 2: &amp;#39;expects&amp;#39;, 3: &amp;#39;the&amp;#39;, 4: &amp;#39;Spanish&amp;#39;, 5: &amp;#39;Inquisition&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="6-executing-shell-commands-with-subprocess"&gt;6. Executing shell commands with&amp;nbsp;subprocess&lt;/h2&gt;
&lt;p&gt;I used to use the os library exclusively to manipulate files; now I can even programmatically call complex command-line tools like ffmpeg for video&amp;nbsp;editing&lt;/p&gt;
&lt;p&gt;(And yes, I use Windows, so do all of my clients. But I have the good grace to be embarrassed about&amp;nbsp;it!)&lt;/p&gt;
&lt;p&gt;Note that the particular subprocess I picked would be much better done with the os library; I just wanted a command everyone would be familiar with. And in general, shell=True is a &lt;span class="caps"&gt;VERY&lt;/span&gt; bad idea, I put it here so that the command output would appear in the IPython notebook cell. Don&amp;#8217;t try this at home,&amp;nbsp;kids!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;drive&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;OS&lt;/span&gt;
 &lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;REDACTED&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Users&lt;/span&gt;\&lt;span class="n"&gt;David&lt;/span&gt;\&lt;span class="n"&gt;Documents&lt;/span&gt;\&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;REDACTED&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-11-26  06:04 AM    &amp;lt;DIR&amp;gt;          .
2014-11-26  06:04 AM    &amp;lt;DIR&amp;gt;          ..
2014-11-23  11:47 AM    &amp;lt;DIR&amp;gt;          .git
2014-11-26  06:06 AM    &amp;lt;DIR&amp;gt;          .ipynb_checkpoints
2014-11-23  08:59 AM    &amp;lt;DIR&amp;gt;          CCCma
2014-09-03  06:58 AM            19,450 colorbrewdict.py
2014-09-03  06:58 AM            92,175 imagecompare.ipynb
2014-11-23  08:41 AM    &amp;lt;DIR&amp;gt;          Japan_Earthquakes
2014-09-03  06:58 AM             1,100 LICENSE
2014-09-03  06:58 AM             5,263 monty_monte.ipynb
2014-09-03  06:58 AM            31,082 pocket_tumblr_reddit_api.ipynb
2014-11-26  06:04 AM             3,211 README.md
2014-11-26  06:14 AM            19,898 top_10_python_idioms.ipynb
2014-09-03  06:58 AM             5,813 tree_convert_mega_to_gexf.ipynb
2014-09-03  06:58 AM             5,453 tree_convert_mega_to_json.ipynb
2014-09-03  06:58 AM             1,211 tree_convert_newick_to_json.py
2014-09-03  06:58 AM            55,970 weather_ML.ipynb
              11 File(s)        240,626 bytes
               6 Dir(s)  180,880,490,496 bytes free
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="7-dict-get-and-iteritems-methods"&gt;7. dict .get() and .iteritems()&amp;nbsp;methods&lt;/h2&gt;
&lt;p&gt;Having a default value when a key does not exist has all kinds of uses, and just like enumerate() for lists, you can iterate over key, value tuples in&amp;nbsp;dicts&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_dict = {&amp;#39;name&amp;#39;: &amp;#39;Lancelot&amp;#39;, &amp;#39;quest&amp;#39;: &amp;#39;Holy Grail&amp;#39;, &amp;#39;favourite_color&amp;#39;: &amp;#39;blue&amp;#39;}

print(my_dict.get(&amp;#39;airspeed velocity of an unladen swallow&amp;#39;, &amp;#39;African or European?\n&amp;#39;))

for key, value in my_dict.iteritems():
    print(key, value, sep=&amp;quot;: &amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;African or European?

quest: Holy Grail
name: Lancelot
favourite_color: blue
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="8-tuple-unpacking-for-switching-variables"&gt;8. Tuple unpacking for switching&amp;nbsp;variables&lt;/h2&gt;
&lt;p&gt;Do you know how many times I had to use a third, temporary dummy variable in &lt;span class="caps"&gt;VB&lt;/span&gt;? c = a; a = b; b =&amp;nbsp;c?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a = &amp;#39;Spam&amp;#39;
b = &amp;#39;Eggs&amp;#39;

print(a, b)

a, b = b, a

print(a, b)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Spam Eggs
Eggs Spam
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="9-introspection-tools"&gt;9. Introspection&amp;nbsp;tools&lt;/h2&gt;
&lt;p&gt;I was aware of dir(), but I had assumed help() would do the same thing as IPython&amp;#8217;s ? magic command. It does way more. (This post has been updated after some great advice from reddit&amp;#8217;s /r/python which, indeed, I wish I&amp;#8217;d known about&amp;nbsp;before!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_dict = {&amp;#39;That&amp;#39;: &amp;#39;an ex-parrot!&amp;#39;}

help(my_dict)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Help on dict&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;)
 |  &lt;span class="n"&gt;dict&lt;/span&gt;() -&amp;gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;
 |  &lt;span class="n"&gt;dict&lt;/span&gt;(&lt;span class="n"&gt;mapping&lt;/span&gt;) -&amp;gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="n"&gt;object&amp;#39;s&lt;/span&gt;
 |      (&lt;span class="nb"&gt;key&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;) &lt;span class="nb"&gt;pairs&lt;/span&gt;
 |  &lt;span class="n"&gt;dict&lt;/span&gt;(&lt;span class="n"&gt;iterable&lt;/span&gt;) -&amp;gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;via:&lt;/span&gt;
 |      &lt;span class="n"&gt;d&lt;/span&gt; = {}
 |      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable:&lt;/span&gt;
 |          &lt;span class="n"&gt;d&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;] = &lt;span class="n"&gt;v&lt;/span&gt;
 |  &lt;span class="n"&gt;dict&lt;/span&gt;(**&lt;span class="n"&gt;kwargs&lt;/span&gt;) -&amp;gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;=&lt;span class="nb"&gt;value&lt;/span&gt; &lt;span class="nb"&gt;pairs&lt;/span&gt;
 |      &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;.  &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;example:&lt;/span&gt;  &lt;span class="n"&gt;dict&lt;/span&gt;(&lt;span class="nb"&gt;one&lt;/span&gt;=&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="n"&gt;two&lt;/span&gt;=&lt;span class="mi"&gt;2&lt;/span&gt;)
 |  
 |  &lt;span class="n"&gt;Methods&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;here:&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;__cmp__&lt;/span&gt;(...)
 |      &lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;__cmp__&lt;/span&gt;(&lt;span class="n"&gt;y&lt;/span&gt;) &amp;lt;==&amp;gt; &lt;span class="o"&gt;cmp&lt;/span&gt;(&lt;span class="o"&gt;x&lt;/span&gt;,&lt;span class="n"&gt;y&lt;/span&gt;)
 |  
 |  &lt;span class="n"&gt;__contains__&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="n"&gt;__contains__&lt;/span&gt;(&lt;span class="n"&gt;k&lt;/span&gt;) -&amp;gt; &lt;span class="nb"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;__delitem__&lt;/span&gt;(...)
 |      &lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;__delitem__&lt;/span&gt;(&lt;span class="n"&gt;y&lt;/span&gt;) &amp;lt;==&amp;gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="o"&gt;x&lt;/span&gt;[&lt;span class="n"&gt;y&lt;/span&gt;]
 |  
 |  &lt;span class="n"&gt;__eq__&lt;/span&gt;(...)
 |      &lt;span class="o"&gt;x&lt;/span&gt;.&lt;span class="n"&gt;__eq__&lt;/span&gt;(&lt;span class="n"&gt;y&lt;/span&gt;) &amp;lt;==&amp;gt; &lt;span class="o"&gt;x==&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
 |  

[&lt;span class="n"&gt;TRUNCATED&lt;/span&gt; &lt;span class="n"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;SPACE&lt;/span&gt;]

 |  
 |  &lt;span class="n"&gt;update&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="n"&gt;update&lt;/span&gt;([&lt;span class="n"&gt;E&lt;/span&gt;, ]**&lt;span class="n"&gt;F&lt;/span&gt;) -&amp;gt; &lt;span class="n"&gt;None&lt;/span&gt;.  &lt;span class="n"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="nb"&gt;from&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;.
 |      &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="k"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; .&lt;span class="nb"&gt;keys&lt;/span&gt;() &lt;span class="k"&gt;method&lt;/span&gt;, &lt;span class="o"&gt;does&lt;/span&gt;:     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;E:&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;] = &lt;span class="n"&gt;E&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;]
 |      &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="n"&gt;lacks&lt;/span&gt; .&lt;span class="nb"&gt;keys&lt;/span&gt;() &lt;span class="k"&gt;method&lt;/span&gt;, &lt;span class="o"&gt;does&lt;/span&gt;:     &lt;span class="k"&gt;for&lt;/span&gt; (&lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt;) &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;E:&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;] = &lt;span class="n"&gt;v&lt;/span&gt;
 |      &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;, &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;followed&lt;/span&gt; &lt;span class="n"&gt;by:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;F:&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;] = &lt;span class="n"&gt;F&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;]
 |  
 |  &lt;span class="nb"&gt;values&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="nb"&gt;values&lt;/span&gt;() -&amp;gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;D&amp;#39;s&lt;/span&gt; &lt;span class="nb"&gt;values&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;viewitems&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="n"&gt;viewitems&lt;/span&gt;() -&amp;gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;set-like&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;providing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;D&amp;#39;s&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;viewkeys&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="n"&gt;viewkeys&lt;/span&gt;() -&amp;gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;set-like&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;providing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;D&amp;#39;s&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;viewvalues&lt;/span&gt;(...)
 |      &lt;span class="n"&gt;D&lt;/span&gt;.&lt;span class="n"&gt;viewvalues&lt;/span&gt;() -&amp;gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;providing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;D&amp;#39;s&lt;/span&gt; &lt;span class="nb"&gt;values&lt;/span&gt;
 |  
 |  ----------------------------------------------------------------------
 |  &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;here:&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;__hash__&lt;/span&gt; = &lt;span class="n"&gt;None&lt;/span&gt;
 |  
 |  &lt;span class="n"&gt;__new__&lt;/span&gt; = 
 |      &lt;span class="n"&gt;T&lt;/span&gt;.&lt;span class="n"&gt;__new__&lt;/span&gt;(&lt;span class="n"&gt;S&lt;/span&gt;, ...) -&amp;gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;, &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;subtype&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="10-pep-8-compliant-string-chaining"&gt;10. &lt;span class="caps"&gt;PEP&lt;/span&gt;-8 compliant string&amp;nbsp;chaining&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008"&gt;&lt;span class="caps"&gt;PEP8&lt;/span&gt;&lt;/a&gt;
is the style guide for Python code. Among other things, it directs that lines not be over 80 characters long and that indenting by consistent over line&amp;nbsp;breaks.&lt;/p&gt;
&lt;p&gt;This can be accomplished with a combination of backslashes \; parentheses () with commas , ; and addition operators +; but every one of these solutions is awkward for multiline strings. There is a multiline string signifier, the triple quote, but it does not allow consistent indenting over line&amp;nbsp;breaks. &lt;/p&gt;
&lt;p&gt;There is a solution: parentheses without commas. I don&amp;#8217;t know why this works, but I&amp;#8217;m glad it&amp;nbsp;does.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_long_text = (&amp;quot;We are no longer the knights who say Ni! &amp;quot;
                &amp;quot;We are now the knights who say ekki-ekki-&amp;quot;
                &amp;quot;ekki-p&amp;#39;tang-zoom-boing-z&amp;#39;nourrwringmm!&amp;quot;)
print(my_long_text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are no longer the knights who say Ni! We are now the knights who say&amp;nbsp;ekki-ekki-ekki-p&amp;#8217;tang-zoom-boing-z&amp;#8217;nourrwringmm!&lt;/p&gt;
&lt;h2 id="_1"&gt;是也乎&lt;/h2&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;141130 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pythonic"></category><category term="FW"></category><category term="idioms"></category><category term="tutorial"></category></entry><entry><title>寻路ing Guido van Rossum</title><link href="http://blog.zoomquiet.io/guido-finding-his-way.html" rel="alternate"></link><updated>2014-09-21T13:13:13+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-09-21:guido-finding-his-way.html</id><summary type="html">
&lt;p&gt;&lt;a href="https://medium.com/dropbox-makers/guido-van-rossum-on-finding-his-way-e018e8b5f6b1"&gt;Guido van Rossum on finding his way — Dropbox Makers — Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;~ Python 缔造者,当前 Dropbox 工程师, 近期编程思考&lt;/p&gt;
&lt;p&gt;Guido van Rossum 作为Python 的创造者,
以及 &lt;code&gt;仁慈的独裁者&lt;/code&gt; (又名 &lt;span class="caps"&gt;BDFL&lt;/span&gt;).
在此篇采访中,反思了近来的思考,
以及在 Dropbox 的经历. 本文也召示了接下来老爹准备折腾什么.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt; 大妈无责任式快译, 只是作为私人阅读笔记性质的存在,
强烈建议大家去原文自行理解一番,并能拨冗回来指点大妈的理解之谬 ;-)&lt;/p&gt;
&lt;h2 id="_1"&gt;程序猿前,你是如何成为电子爱好者的?&lt;/h2&gt;
&lt;p&gt;嚓了,这事儿忒久了,久到基本记忆不能了, 只是记得以前对电子很迷就是了.&lt;/p&gt;
&lt;h2 id="_2"&gt;那会儿子是怎么聚集小伙伴们的?&lt;/h2&gt;
&lt;p&gt;高中时在课堂上相遇的, 一起折腾物理老师指导下的各种电子设备.&lt;/p&gt;
&lt;p&gt;整个高中只是对未来职业有个模糊的概念,
认定自个儿在语言/社科上是没什么天份的, 所以,决定进入数学专业.&lt;/p&gt;
&lt;h2 id="_3"&gt;最后乍从电子转变为程序猿的?&lt;/h2&gt;
&lt;p&gt;在Amsterdam大学,折腾数学时,
涉及有编程,接触到大型计算机后, 立即发现了俺真正的激情所在.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AOw_zZbFbtEJAzwRQ" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*5Z4e-AOw_zZbFbtEJAzwRQ.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;~ 旧金山 Dropbox 内的 Hack week 上,Guido 谈及了Py 3 / Dan Stroud 拍摄&lt;/p&gt;
&lt;h2 id="_4"&gt;对计算机科学的兴趣所在?&lt;/h2&gt;
&lt;p&gt;通过业余电子爱好,接触到了一系列计算设备,
得以真正理解计算机,
并确信,编程比电子好玩的多. 而数学,无论多高端的课目,好象都和自己没什么关系.&lt;/p&gt;
&lt;p&gt;但是,专业上那时,没有办法灵活的转变方向,
于是俺申请了大学数据中心兼职位置,
开始长达5年的自学, 即,本质上几近辍学.&lt;/p&gt;
&lt;h2 id="mog"&gt;&lt;span class="caps"&gt;MOG&lt;/span&gt;,乍回事儿?!&lt;/h2&gt;
&lt;p&gt;这份工作很赞,
而且,遇到了好人,
数据中心的一位教授鼓励俺说: “小子,不错嘦你毕业,这儿可以是你的全职岗位!” (笑ing)&lt;/p&gt;
&lt;p&gt;结果就这么在岗位上毕业,并进入了研究所, 真的全职程序猿了.&lt;/p&gt;
&lt;h2 id="_5"&gt;推上曰过:”在米国我是荷兰人,但在荷兰我又表现的很美国#纠结”,那么哪儿是你感觉最象自家的?&lt;/h2&gt;
&lt;p&gt;当然,在自个儿屋子里时.. (笑ing)&lt;/p&gt;
&lt;p&gt;俺老婆是老美,两儿子也都说E文,
在米国也呆了超过18年, 已经很难想象会回欧洲了!&lt;/p&gt;
&lt;p&gt;目测余生多数时间肯定在米国了, 而且就在湾区,这绝对是一个伟大的地方.&lt;/p&gt;
&lt;h2 id="dropbox"&gt;在Dropbox最近折腾了什么?&lt;/h2&gt;
&lt;p&gt;俺已经完成
&lt;a href="https://www.dropbox.com/developers/datastore"&gt;Datastore &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;
有日子了,
今天上线,将发布给用户为
&lt;a href="https://www.dropbox.com/developers/blog/107/new-datastore-features-shared-datastores-local-datastores-and-datastore-webhooks"&gt;share datastores&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="NMJBScQgtLZE0zmeOA1nJw" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*NMJBScQgtLZE0zmeOA1nJw.png"/&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;带团队,还是更加独立?&lt;/h2&gt;
&lt;p&gt;对于这一特殊的数据功能,
俺独立完成主要工作,
另外两位,主要进行测试,
在发布后,将会融入更大的团队,
并接纳实习生 …&lt;/p&gt;
&lt;h2 id="dropbox_1"&gt;进入 Dropbox 时,你要求当程序猿而不是经理,这对你很重要嘛?&lt;/h2&gt;
&lt;p&gt;因为俺更加喜欢实际的编程,
以往俺被关进了一个团队,
无论编程还是作管理,
从来没有令俺舒服过.
当然,随着时间的推移,俺的领导能力有所增长, 可是,终究,俺是喜欢编程多过告诉其它人应该怎么作.&lt;/p&gt;
&lt;h2 id="dropbox-python-bdfl"&gt;你乍平衡 Dropbox 工程师和 Python &lt;span class="caps"&gt;BDFL&lt;/span&gt; 两种角色的?&lt;/h2&gt;
&lt;p&gt;在时间管理方面,
这两个角色的确是冲突的. 我并没有进行强制性的预订,为这两种角色.&lt;/p&gt;
&lt;p&gt;实践中,哪个角色必须投入更多精力时, 就相应的减少另一个角色的.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AriSTNW_leEP85c7r" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*AriSTNW_leEP85c7r-wcew.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;~ 在&lt;span class="caps"&gt;DBX&lt;/span&gt; 2013 上 Guido 介绍 Dropbox 的数据存储. / Doug Cody 拍摄&lt;/p&gt;
&lt;h2 id="dropbox_2"&gt;在 Dropbox 的工作什么令你最得劲?&lt;/h2&gt;
&lt;p&gt;在这儿,最令人满意的无外乎,
能见到这么堆热情/专注/有生产力/强大的人, 如此热衷的在推动产品和功能.&lt;/p&gt;
&lt;p&gt;身处其中,本身就非常赞!&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;
细思恐极哪,这意味着 Google 的团队的确如 &lt;code&gt;王珢&lt;/code&gt; 所言,
不是那么的… )&lt;/p&gt;
&lt;h2 id="hack-week"&gt;你在 Hack Week 的项目是什么?&lt;/h2&gt;
&lt;p&gt;Python 的静态类型.
来源自我们的一位实习工程师, Jukka Lehtosalo 的博士论文,
他实际上完成了一个原型,
在一周时间里,
我们一组7 人,对原型进行了改进,并完成了大量的工具.&lt;/p&gt;
&lt;p&gt;至今并没有形成完备的产品, 但是,大家都很期待这一够力的创意能产生出什么来.&lt;/p&gt;
&lt;h2 id="_7"&gt;为毛你选择静态类型这一项目?&lt;/h2&gt;
&lt;p&gt;俺认为增加静态类型,
对未来是有益的,
至少能先帮助 Dropbox 转换自身的 Python 2 和 3 的代码&lt;/p&gt;
&lt;p&gt;&lt;img alt="yemdZovwCmvm7b2Dkm6SRQ" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*yemdZovwCmvm7b2Dkm6SRQ.png"/&gt;&lt;/p&gt;
&lt;p&gt;Dropbox 的第一行代码就是Python.
而 Python Bees 将成为 &lt;span class="caps"&gt;DBX&lt;/span&gt; 以及 更早 Dropbox hack weeks 的新特性.&lt;/p&gt;
&lt;h2 id="python"&gt;如何平衡程序猿最新需求和 Python 长线版本间的冲突?&lt;/h2&gt;
&lt;p&gt;Python 有一个很大的团队,
长期审核进入 Python 的特性. 在经过20多年的运营,我们已经很熟悉这一编程语言应该坚守的东西.&lt;/p&gt;
&lt;p&gt;语言变化太快,用户将抱怨项目总是无法稳定;
变化太慢,程序猿就抱怨错误总是不修订或是要求的功能从来不响应; 这里有种非常微妙的平衡在其中!&lt;/p&gt;
&lt;p&gt;所以,一般情况下,将变化快的东西,放在库中支持,
优先确保核心语言特性的稳定, 这样大家都根据需要安装对应的开源库就好.&lt;/p&gt;
&lt;p&gt;学习到这点,对俺来说非常不可思异.
目前俺处于非常舒适的状态, 即使现在俺退出,后续开发者也能理解怎么取舍的.&lt;/p&gt;
&lt;h2 id="python_1"&gt;有想过从 Python 社区退休? 有规划这事儿卟?&lt;/h2&gt;
&lt;p&gt;(笑ing)
这是一个很好的组合问题.
因为,俺的确有这么想过, 不过,当前还仅仅是想着.&lt;/p&gt;
&lt;h2 id="python_2"&gt;有没担心过更多新语言出现并替代 Python ?&lt;/h2&gt;
&lt;p&gt;因为发现的一种现象,令俺从未不担心这事儿.&lt;/p&gt;
&lt;p&gt;那就是总是有人在切换开发语言,
他们花了 三周/6周/两年, 就成为某种语言专家.
基于这种经验,他们就担心,
对 Python 的学习,可能也很快过时,必须重新开始.&lt;/p&gt;
&lt;p&gt;我见过各种语言/系统的普及以及更替,
但是,我不知道 Python 的这种兴衰周期,
5年?15年?
我当然希望 Python 持续吸收新的语言特性,发展下去,适应新的时代.
同时也期待,有更好的语言,借用 Python 的思想, 在不同的形式上结合其它语言,发展出不同的道路来.&lt;/p&gt;
&lt;p&gt;&lt;img alt="omEEAJapdc0XY9IfR" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*omEEAJapdc0XY9IfR-mFlA.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;~ 在 &lt;span class="caps"&gt;DBX&lt;/span&gt; 2013 Python Bee 集会上,Guido 和 Dropbox &lt;span class="caps"&gt;CEO&lt;/span&gt; Drew Houston 
联手庆贺. /  Doug Cody 拍摄&lt;/p&gt;
&lt;p&gt;&lt;img alt="4saVabl5aGfdTVuPLBNBCQ" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*4saVabl5aGfdTVuPLBNBCQ.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ziwbjd1WMkmuuoFK9q0Q" src="https://d262ilb51hltx0.cloudfront.net/max/1200/1*w-ziwbjd1WMkmuuoFK9q0Q.jpeg"/&gt;&lt;/p&gt;
&lt;h2 id="_8"&gt;在 &lt;a href="http://neopythonic.blogspot.com/2013/10/letter-to-young-programmer.html"&gt;给年轻程序猿的信&lt;/a&gt; 中,你号召要有大梦想,可现实挑战是大梦想忒多了,面对这么多的机会,你有什么建议给早鸟们?&lt;/h2&gt;
&lt;p&gt;(&lt;code&gt;译注:&lt;/code&gt;中译: &lt;a href="http://blog.zoomquiet.io/guido-letter-2-young.html"&gt;Letter to a young programmer&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;早期职业生涯?
俺可能没有什么很好的经验,
因为,俺可是用了很长时间,才明白自个儿应该作什么的. 回想,基本上只是开开心心的编程,一切就自然来到面前.&lt;/p&gt;
&lt;p&gt;实际上,俺从来没有争取过什么工作, 只是等待,直到有人询问合作意愿,才进行考虑.&lt;/p&gt;
&lt;p&gt;我从不强调一切在掌握之中,
的确有那么一种病叫:&lt;code&gt;怕错过&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上, 那些尝试控制一切的人并没有比我多快乐些什么.&lt;/p&gt;
&lt;p&gt;所以,对于长期职业,你并不能真正控制一切.
有时,对一件事儿决定太快, 你可能就真正错过了一次意想不到机会.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h2 id="changlog"&gt;Changlog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140921 蠎周刊:133 期,推荐文章,不自觉的认真读完,形成了这一快译.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="DAMA"></category><category term="Pythoneer"></category><category term="Guido"></category></entry><entry><title>Python 101: 传播Python时几点建议</title><link href="http://blog.zoomquiet.io/py101-taching-suggestions.html" rel="alternate"></link><updated>2014-08-08T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-08-08:py101-taching-suggestions.html</id><summary type="html">&lt;p&gt;&lt;img alt="/chinese-python-poster" src="https://datalabcc.files.wordpress.com/2014/05/chinese-python-poster.jpg?w=590"/&gt;&lt;/p&gt;

&lt;p&gt;来自: &lt;a href="http://www.curiousefficiency.org/posts/2014/08/python-teaching-suggestions.html"&gt;Some Suggestions for Teaching Python | Curious Efficiency&lt;/a&gt; 
Nick Coghlan
2014-08-08 12:55&lt;/p&gt;
&lt;p&gt;I recently had the chance to attend a Software Carpentry bootcamp at the University of Queensland (as a teaching assistant), as well as seeing a presentation from one of &lt;span class="caps"&gt;UQ&lt;/span&gt;’s tutors at PyCon Australia 2014.&lt;/p&gt;
&lt;p&gt;While many of the issues they encountered were inherent in the complexity of teaching programming, a few seemed like things that could be avoided.&lt;/p&gt;
&lt;h2 id="getting-floating-point-results-from-integer-division"&gt;Getting floating point results from integer division&lt;/h2&gt;
&lt;p&gt;In Python 2, integer division copies C in truncating the answer by default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s2"&gt;"print(3/4)"&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Promoting to floating point requires type coercion, a command line flag or a future import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"print(float(3)/4)"&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Qnew&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"print(3/4)"&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"from __future__ import division; print(3/4)"&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python 3 just does the right thing by default, so one way to avoid the problem entirely is to teach Python 3 instead of Python 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 -c &lt;span class="s2"&gt;"print(3/4)"&lt;/span&gt;
0.75
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(In both Python 2 and 3, the &lt;code&gt;//&lt;/code&gt; floor division operator explicitly requests truncating division when it is desired)&lt;/p&gt;
&lt;h2 id="common-python-23-syntax-for-printing-values"&gt;Common Python 2/3 syntax for printing values&lt;/h2&gt;
&lt;p&gt;I’ve been using Python 2 and 3 in parallel for more than 8 years now (while Python 3.0 was released in 2008, the project started in earnest a couple of years earlier than that, while Python 2.5 was still in development).&lt;/p&gt;
&lt;p&gt;One essential trick I have learned in order to make regularly switching back and forth feasible is to limit myself to the common print syntax that works the same in both versions: passing a single argument surrounded by parentheses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s1"&gt;'print("Hello world!")'&lt;/span&gt;
Hello world!
$ python3 -c &lt;span class="s1"&gt;'print("Hello world!")'&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I need to pass multiple arguments, I’ll use string formatting, rather than the implicit concatenation feature.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s1"&gt;'print("{} {}{}".format("Hello", "world", "!"))'&lt;/span&gt;
Hello world!
$ python3 -c &lt;span class="s1"&gt;'print("{} {}{}".format("Hello", "world", "!"))'&lt;/span&gt;
Hello world!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rather than doing this, the Software Carpentry material that was used at the bootcamp I attended used the legacy Python 2 only &lt;code&gt;print&lt;/code&gt; syntax extensively, causing examples that otherwise would have worked fine in either version to fail for students that happened to be running Python 3. Adopting the shared syntax for printing values could be enough to make the course largely version independent.&lt;/p&gt;
&lt;h2 id="distinguishing-between-returning-and-printing-values"&gt;Distinguishing between returning and printing values&lt;/h2&gt;
&lt;p&gt;One problem noted both at the bootcamp and by presenters at PyCon Australia was the challenge of teaching students the difference between printing and returning values. The problem is the “Print” part of the Read-Eval-Print-Loop provided by Python’s interactive interpreter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def print_arg(x):
...     print(x)
...
&amp;gt;&amp;gt;&amp;gt; def return_arg(x):
...     return x
...
&amp;gt;&amp;gt;&amp;gt; print_arg(10)
10
&amp;gt;&amp;gt;&amp;gt; return_arg(10)
10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s no obvious difference in output at the interactive prompt, especially for types like numbers where the results of &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;repr&lt;/code&gt; are the same. Even when they’re different, those differences may not be obvious to a student:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print_arg("Hello world")
Hello world
&amp;gt;&amp;gt;&amp;gt; return_arg("Hello world")
'Hello world'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While I don’t have a definitive answer for this one, an experiment that seems worth trying to me is to teach students how to replace &lt;code&gt;sys.displayhook&lt;/code&gt;. 
In particular, I suggest demonstrating the following change, and seeing if it helps explain the difference between printing output for display to the user and returning values for further processing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_displayhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-&amp;gt; {!r}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;displayhook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_displayhook&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;return_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Understanding the difference between printing and returning is essential to learning to use functions effectively, and tweaking the display of results this way may help make the difference more obvious.&lt;/p&gt;
&lt;h2 id="addendum-ipython-including-ipython-notebook"&gt;Addendum: IPython (including IPython Notebook)&lt;/h2&gt;
&lt;p&gt;The initial examples above focused on the standard CPython runtime, include the default interactive interpreter. The IPython interactive interpreter, including the IPython Notebook, has a couple of interesting differences in behaviour that are relevant to the above comments.&lt;/p&gt;
&lt;p&gt;Firstly, it does display return values and printed values differently, prefacing results with an output reference number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: print 10
10

In [2]: 10
Out[2]: 10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Secondly, it has an optional “autocall” feature that allows a user to tell IPython to automatically add the missing parentheses to a function call if the user leaves them out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ipython3 --autocall&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -c &lt;span class="s2"&gt;"print 10"&lt;/span&gt;
-&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
10
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a general purpose feature that allows users to make their IPython sessions behave more like languages that don’t have first class functions (most notably, IPython’s autocall feature closely resembles &lt;span class="caps"&gt;MATLAB&lt;/span&gt;’s “command syntax” notation for calling functions).&lt;/p&gt;
&lt;p&gt;It also has the side effect that users that use IPython, have autocall enabled, and don’t use any of the more esoteric quirks of the Python 2 &lt;code&gt;print&lt;/code&gt; statement (like stream redirection or suppressing the trailing newline) may not even notice that &lt;code&gt;print&lt;/code&gt; became an ordinary builtin in Python 3.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140811 翻译 Weekly issue:127 时发现,转译学习&lt;/li&gt;
&lt;/ul&gt;</summary><category term="press"></category><category term="101"></category><category term="Zh"></category></entry><entry><title>为毛俺不担心所谓Python用户流失</title><link href="http://blog.zoomquiet.io/why-i-dont-worry-about-pythons-popularity.html" rel="alternate"></link><updated>2014-07-11T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-07-11:why-i-dont-worry-about-pythons-popularity.html</id><summary type="html">&lt;p&gt;Why I don’t worry about Python losing&amp;nbsp;users&lt;/p&gt;
&lt;p&gt;I just had a need to read two files that were line-delimited lists of domains, consolidate the data, and then output the domains sorted and all lowercased to a new file. It took me 10 lines of Python code and worked perfectly on the first&amp;nbsp;try.&lt;/p&gt;
&lt;p&gt;Out of curiosity and to make sure I keep learning Go (my team at work uses it whenever possible), I decided to re-implement the same functionality. That took 
&lt;a href="https://gist.github.com/brettcannon/a2a37cc5aadbc91c02ad"&gt;56 lines in Go&lt;/a&gt;
. When I went back and refactored the Python code to match the abstractions I used in the Go code it grew to 
&lt;a href="https://gist.github.com/brettcannon/82c4fe68bac30f4ed653"&gt;17 lines&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;
&lt;p&gt;And this sort of thing is exactly why I do not worry about Python’s popularity (at least in terms of users). While languages like Go compete with Python on a performance:productivity comparison, when you compare Python to almost any other language based purely on productivity it trounces the competition. And this shouldn’t shock anyone when you think about the history of Python. The language was initially created to script 
&lt;a href="http://en.wikipedia.org/wiki/Amoeba_(operating_system)"&gt;a distributed operating system&lt;/a&gt;
. This is why in the ‘90s and early 2000s the comparison was always Python vs. Perl and then Python vs. Ruby. Only in the 2000s and later did Python get compared to Java or very recently to Go or&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;And this productivity view of Python also ties into education. With 
&lt;a href="http://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext"&gt;Python now the most popular intro teaching language at the top &lt;span class="caps"&gt;U.S.&lt;/span&gt; universities&lt;/a&gt;
, many people are learning how to program using Python. But exposure early on to a language does not guarantee future usage by someone; I for one did not use Scheme after my intro course. But because Python is such a productive language, the language becomes a staple in one’s toolkit of programming. If people learn Python first, then when they need to write a quick script like I did today they will most likely reach for Python than Java or Go or some other language they may be using for their&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;All of this is why I don’t worry about Python’s demise due to lack of users. People might switch to Go at work because the performance:productivity ratio is very good for their project or team. Or maybe people got frustrated with the Python 2/3 transition and didn’t want to base their project at work on Python anymore. It really doesn’t matter in terms of the number of users of Python because I’m willing to bet those people still reach for Python when they need a one-off script to solve a problem. And I bet these people still recommend Python when they are asked what people’s first programming language should be. In other words I don’t worry about our great-for-teaching, highly productive scripting language ever lacking users; Python will always be&amp;nbsp;useful.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140728&amp;nbsp;从周刊中发现,决定翻译&lt;/li&gt;
&lt;/ul&gt;</summary><category term="BRETT"></category><category term="Leo"></category><category term="PyConChina"></category><category term="Zh"></category></entry><entry><title>ScrapBook彻查成果</title><link href="http://blog.zoomquiet.io/zq-chk4scrapbook.html" rel="alternate"></link><updated>2014-07-11T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-07-11:zq-chk4scrapbook.html</id><summary type="html">
&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;参考:&lt;a href="http://wiki.woodpecker.org.cn/moin/ZqStudy/MyLearningSkill"&gt;我的学习&amp;amp;工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从06年,就将个人网络资料收集/整理/发布,
切换为主力使用 &lt;a href="http://www.xuldev.org/scrapbook/"&gt;ScrapBook&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;这一下子就8年过去了,常用系统也从 Ubuntu 切换为 &lt;span class="caps"&gt;MAC&lt;/span&gt;, 收集的本地网页也超过了8万个,早已被迫进行了分库.&lt;/p&gt;
&lt;p&gt;自动发布的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://floss.zoomquiet.io&lt;/li&gt;
&lt;li&gt;http://skm.zoomquiet.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也成为一些朋友常常挖掘的资料库.&lt;/p&gt;
&lt;p&gt;可以说, ScrapBook 在 everynote 流行之前,就成功的解决了俺主要的在线网页资料为主的,
外部知识仓库的收集/整理/组合/复用/发布 等等基本功能/服务.&lt;/p&gt;
&lt;p&gt;而且, 也通过Python ,完成了辅助的小脚本工具,配合 个人主机/7牛&lt;span class="caps"&gt;CDN&lt;/span&gt;, 完成了自动化的差异发布.&lt;/p&gt;
&lt;h3 id="_2"&gt;可是!&lt;/h3&gt;
&lt;p&gt;参考: &lt;a href="http://blog.zoomquiet.io/livin-scrapbook.html"&gt;ScrapBook 生存指南&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从去年开始, 本地 &lt;code&gt;FLOSS&lt;/code&gt; 仓库,就已经无法正常进行标准搜索了,一搜索,整个 FireFox 就僵死.&lt;/li&gt;
&lt;li&gt;而且,从其它仓库切换进入 &lt;span class="caps"&gt;FLOSS&lt;/span&gt; 时,要等待半分钟以上…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;期待&lt;/h2&gt;
&lt;p&gt;实在太常用,所以,无法忍,而且也不打算切换到 everynote 什么的其它平台上, 作为一头合格的程序猿,就是要自个儿折腾通透哪!&lt;/p&gt;
&lt;p&gt;所以,先决定目标:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过进一步拿合理分仓库,有效减少每个仓库包含的网页数量&lt;/li&gt;
&lt;li&gt;通过脚本分析 &lt;code&gt;scrapbook.rdf&lt;/code&gt; 数据库来清除多余节点(隐藏的无效的)&lt;/li&gt;
&lt;li&gt;通过脚本分析 对应 &lt;code&gt;data/&lt;/code&gt; 目录中的网页子目录,清除多余的&lt;/li&gt;
&lt;li&gt;针对全新的分仓库,建立对应的 7牛 空间,以及对应的 &lt;code&gt;*.zoomquiet.io&lt;/code&gt; 子站发布&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之就是要加速,无论本地/远程&lt;/p&gt;
&lt;h3 id="_4"&gt;数据结构&lt;/h3&gt;
&lt;p&gt;为了大家平滑的理解折腾之处,先简要说明一下 ScrapBook 的数据结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XX仓库/     对应 Multi-ScrapBook 开启后,不同的Book
  +- data   实际本地网页存放入口, 类似 20050205102119 的子目录
  +- tree   导出目录树后的 html 入口
  +- ...
  `- scrapbook.rdf 插件界面使用的 xml 数据仓库
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scrapbook.rdf 的关键数据约定&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;RDF:RDF&lt;/span&gt; &lt;span class="na"&gt;xmlns:NS2=&lt;/span&gt;&lt;span class="s"&gt;"http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"&lt;/span&gt;
         &lt;span class="na"&gt;xmlns:NC=&lt;/span&gt;&lt;span class="s"&gt;"http://home.netscape.com/NC-rdf#"&lt;/span&gt;
         &lt;span class="na"&gt;xmlns:RDF=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/02/22-rdf-syntax-ns#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  主体内容
&lt;span class="nt"&gt;&amp;lt;/RDF:RDF&amp;gt;&lt;/span&gt;

根列表:
&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    %(rdf_li)s
  &lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;

目录容器:
&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    %(rdf_li)s
  &lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;

目录节点条目:
&lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

目录节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;"folder"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_id)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_title)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

页面节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_type)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_id)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_title)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_comment)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_icon)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_source)s"&lt;/span&gt; 
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

笔记节点:
&lt;span class="nt"&gt;&amp;lt;RDF:Description&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;"note"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_id)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_title)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

分割线节点:
&lt;span class="nt"&gt;&amp;lt;NC:BookmarkSeparator&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:%(rdf_item)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:type=&lt;/span&gt;&lt;span class="s"&gt;"separator"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:id=&lt;/span&gt;&lt;span class="s"&gt;"%(rdf_id)s"&lt;/span&gt;
        &lt;span class="na"&gt;NS2:title=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:chars=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:comment=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:icon=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="na"&gt;NS2:source=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上 &lt;code&gt;%(rdf_id)s&lt;/code&gt; 之类是 Py 内置模板的语法,
在 &lt;code&gt;scrapbook.rdf&lt;/code&gt; 实例中,都是形如: &lt;code&gt;20050205102119&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;折腾&lt;/h2&gt;
&lt;p&gt;纪要一下折腾的过程中,要命的关键过程/代码&lt;/p&gt;
&lt;h3 id="_6"&gt;清查&lt;/h3&gt;
&lt;p&gt;一切开始之前,的体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -h * 
...
5.6G    ZqDevRel
6.5G    ZqFLOSS
3.7G    ZqSKM
...

$ ls ZqDevRel/data/ &lt;span class="p"&gt;|&lt;/span&gt; wc
   &lt;span class="m"&gt;26214&lt;/span&gt;   &lt;span class="m"&gt;26214&lt;/span&gt;  393210

&lt;span class="c1"&gt;# 计划切分为&lt;/span&gt;
  -&amp;gt; zqCoder 
  -&amp;gt; zqSMM

$ ls ZqFLOSS/data/ &lt;span class="p"&gt;|&lt;/span&gt; wc
   &lt;span class="m"&gt;30767&lt;/span&gt;   &lt;span class="m"&gt;30767&lt;/span&gt;  461505

&lt;span class="c1"&gt;# 计划切分为&lt;/span&gt;
  -&amp;gt; zqDevRes
  -&amp;gt; zqSCM   
  -&amp;gt; zqPythonic
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先在仓库中,根据拆分目标,将内容树收纳到对应的目录中, 以便复制,加载后,快速删除.&lt;/p&gt;
&lt;h4 id="pax"&gt;pax&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pax&lt;/code&gt; 是个好工具,原先习惯性的用 &lt;code&gt;cp&lt;/code&gt; 那叫个慢!
搜索才知道,大量小文件的迁移就应该用 &lt;code&gt;pax&lt;/code&gt;
于是简单的起个背景周末跑吧….&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -hs *
...
5.7G    ZqDevRel
  5.7G    zqCoder
  5.7G    zqSMM

6.5G    ZqFLOSS
  6.5G    zqDevRes
  6.5G    zqPythonic
  6.5G    zqSCM

...
4.0K    scraptools
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;体积占用激增3倍!&lt;/p&gt;
&lt;p&gt;然后,逐一用 ScrapBook 加载新的目录&lt;/p&gt;
&lt;h4 id="_7"&gt;手工删除目录树&lt;/h4&gt;
&lt;p&gt;再对比几个仓库的体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/KuaiPan/zScrapBook
$ ls ZqFLOSS/data/ | wc -l
   30767

$ ls zqSCM/data/ | wc -l
   25320

$ du -hs *
...
5.3G    data
...

~/KuaiPan/zScrapBook
$ ls zqDevRes/data/ | wc -l
   24045

$ ls zqPythonic/data/ | wc -l
   24294

$ ls zqSCM/data/ | wc -l
   25319
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="_8"&gt;严正的不科学!&lt;/h4&gt;
&lt;p&gt;手工折腾了半天,却发现几乎没有释放多少空间出来,
好象总是有 20000 左右的目录,是不存在的页面节点…&lt;/p&gt;
&lt;h3 id="_9"&gt;解析&lt;/h3&gt;
&lt;p&gt;首先,&lt;/p&gt;
&lt;h3 id="_10"&gt;重构&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict/issues/14"&gt;xml containing 1 child · Issue #14 · martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dict_constructor&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_11"&gt;删除&lt;/h3&gt;
&lt;h2 id="_12"&gt;回顾&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;JS&lt;/span&gt; 在 FireFox 的确不给力哪…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -hs *
...
957M  ZqDevRel
866M  ZqFLOSS
349M  ZqKss
3.4G  ZqSKM
...
1.0G  _chaos
5.2G  _stuff
...
424K  scrapbooktools
766M  zqCoder
1.0G  zqDevRes
1.4G  zqPythonic
1.4G  zqSCM
564M  zqSMM
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么,在 700M 的 zqCoder 仓库中无法搜索,但是, 3.4G 的ZqSKM 中就可以?!&lt;/p&gt;
&lt;p&gt;认真对比,从重建的空仓库的 .rdf 中,发现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:search"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
....
&lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个节点中包含有意外的几万条记录!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for seq in doc['RDF:RDF']['RDF:Seq']:
    if 'urn:scrapbook:search' == seq['@RDF:about']:
        seq.pop('RDF:li')
        break
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几行代码解决!&lt;/p&gt;
&lt;h3 id="_13"&gt;数据新结构&lt;/h3&gt;
&lt;h3 id="_14"&gt;功能开关&lt;/h3&gt;
&lt;h2 id="_15"&gt;时间帐单&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ 3.5H 用pax 复制,手工清除多余树
+ 1.5H 重新理解自个儿的脚本,加载自制数据结构到湿件
+ 1.0H 追加走查功能 
+ 2.0H 调试走查,优化输出,明确可清除无效节点的数量级
+ 1.5H 尝试用 click 改进功能开关,未果
+ 2.0H 对比测试不同的解析库
+ 1.0H 用xmltodict 重构原先的 走查功能
+ 1.5H 根据比对的需求,改进 xmltodict 的数据结构,追加 K/V 复用
+ 2.0H 再复制测试仓库,用 sh 小心的测试实际删除行为
+ 1.0H 通测
+ 2.5H 批量处置7 个新旧仓库,清删除 16万+ 个无用目标, 近25G+ 空间释放
+ 4.0H 整理代码, 组织文档

24.5H+ 自然时间, 3+天业余时间
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;140909 才算完成一个可以看的版本&lt;/li&gt;
&lt;li&gt;140711 完成所有功能,启动文档回顾&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="140708-scrapbook"&gt;140708 ScrapBook 分库&lt;/h1&gt;
&lt;h2 id="2h-click"&gt;+2H click&lt;/h2&gt;
&lt;p&gt;果然,清查出有大量, &lt;span class="caps"&gt;FLOSS&lt;/span&gt; 中当初没有合理清除的节点
从 &lt;span class="caps"&gt;ROOT&lt;/span&gt; 引发的树中挂不上的&lt;/p&gt;
&lt;h2 id="2h"&gt;+2H 实际清减&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://amoffat.github.io/sh/"&gt;sh 1.08 — sh v1.08 documentation&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sh&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-Rfv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del_dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;用 sh 删除目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    tree_nodes:  3574
    exp_items:  4164
    dirs:  590
    DESC : 24190
    chaos: 20616
    有效: 3574
$ ls reDevRel/data/ | wc -l
    2996
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;用 lxml/模板 重构 rdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人肉来总是感觉不对,&lt;/p&gt;
&lt;p&gt;尝试:&lt;/p&gt;
&lt;h3 id="lxml"&gt;lxml&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;忒复杂!!!
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="untangle"&gt;untangle&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/stchris/untangle"&gt;stchris/untangle&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RDF&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Seq&lt;/span&gt;         &lt;span class="mi"&gt;579&lt;/span&gt;
&lt;span class="n"&gt;RDF_Description&lt;/span&gt;     &lt;span class="mi"&gt;24190&lt;/span&gt;
&lt;span class="n"&gt;NC&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;BookmarkSeparator&lt;/span&gt;    &lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x100666ed0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;exp_level_idx&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;RUNed&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="mf"&gt;2263.57079&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;快,但是,无法Dump,而且书写不直觉, 要将 “:” 变成 “_” obj.RDF_RDF.RDF_Description&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;open file '_chaos/scraotools_reDevRel.pkl', mode 'wb' at 0x100769ed0&amp;gt;
Traceback (most recent call last):
  File "scraptools/zq_chk4scrap.py", line 457, in &amp;lt;module&amp;gt;
    RDFD = exp_level_idx(MYBOOK)
  File "scraptools/zq_chk4scrap.py", line 161, in cal_time
    result = func(*args)
  File "scraptools/zq_chk4scrap.py", line 205, in exp_level_idx
    pickle.dump(obj.RDF_RDF, output)
  File "/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py", line 1370, in dump
    Pickler(file, protocol).dump(obj)
  File "/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/Users/zoomq/.pyenv/versions/2.7.6/lib/python2.7/pickle.py", line 719, in save_inst
    getstate = obj.__getstate__
  File "/Users/zoomq/.pyenv/versions/276chaos/lib/python2.7/site-packages/untangle.py", line 66, in __getattr__
    raise IndexError('Unknown key &amp;lt;%s&amp;gt;' % key)
IndexError: Unknown key &amp;lt;__getstate__&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="xmltodict"&gt;xmltodict&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict"&gt;martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[u'RDF:RDF']&lt;/span&gt;
&lt;span class="err"&gt;RDF:Seq&lt;/span&gt;         &lt;span class="err"&gt;579&lt;/span&gt;
&lt;span class="err"&gt;RDF:Description&lt;/span&gt;     &lt;span class="err"&gt;24190&lt;/span&gt;
&lt;span class="err"&gt;NC:BookmarkSeparator&lt;/span&gt;    &lt;span class="err"&gt;57&lt;/span&gt;
        &lt;span class="err"&gt;exp_level_idx()&lt;/span&gt; &lt;span class="err"&gt;RUNed~&lt;/span&gt; &lt;span class="err"&gt;4997.31612&lt;/span&gt; &lt;span class="err"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;慢,但是,能 dump 而且书写直觉
    doc[‘&lt;span class="caps"&gt;RDF&lt;/span&gt;:&lt;span class="caps"&gt;RDF&lt;/span&gt;’][‘&lt;span class="caps"&gt;RDF&lt;/span&gt;:Seq’]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[u'RDF:RDF']&lt;/span&gt;
&lt;span class="err"&gt;RDF:Seq&lt;/span&gt;         &lt;span class="err"&gt;579&lt;/span&gt;
&lt;span class="err"&gt;RDF:Description&lt;/span&gt;     &lt;span class="err"&gt;24190&lt;/span&gt;
&lt;span class="err"&gt;NC:BookmarkSeparator&lt;/span&gt;    &lt;span class="err"&gt;57&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;open&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt; &lt;span class="err"&gt;'_chaos/scraotools_reDevRel.pkl',&lt;/span&gt; &lt;span class="err"&gt;mode&lt;/span&gt; &lt;span class="err"&gt;'wb'&lt;/span&gt; &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;0x10f26d420&amp;gt;&lt;/span&gt;
        &lt;span class="err"&gt;exp_level_idx()&lt;/span&gt; &lt;span class="err"&gt;RUNed~&lt;/span&gt; &lt;span class="err"&gt;16878.75390&lt;/span&gt; &lt;span class="err"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时,能反写出&lt;span class="caps"&gt;XML&lt;/span&gt; 来!&lt;/p&gt;
&lt;p&gt;主要问题是行为不统一!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;RDF:Seq&lt;/span&gt; &lt;span class="na"&gt;RDF:about=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:item20070113201921"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:item20070113201940"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;RDF:li&lt;/span&gt; &lt;span class="na"&gt;RDF:resource=&lt;/span&gt;&lt;span class="s"&gt;"urn:scrapbook:item20070113201941"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/RDF:Seq&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;时 唯一的 &lt;span class="caps"&gt;RDF&lt;/span&gt;:Li 不是 List!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;K2SEQ[crt_id]&amp;gt;RDF:Li OrderedDict([(u'@RDF:resource', u'urn:scrapbook:item20070113201921')])
K2SEQ[crt_id]['RDF:li'].len:: 1
    &amp;lt;class 'collections.OrderedDict'&amp;gt;
K2SEQ[crt_id]&amp;gt;RDF:Li @RDF:resource
     try crt_node.keys:
@RDF:resource
K2SEQ[crt_id]&amp;gt;RDF:Li OrderedDict([(u'@RDF:resource', u'urn:scrapbook:item20070527160000')])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
K2SEQ[crt_id]&amp;gt;RDF:Li OrderedDict([(u'@RDF:resource', u'urn:scrapbook:item20061006133550')])
K2SEQ[crt_id]['RDF:li'].len:: 9
    &amp;lt;type 'list'&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/martinblech/xmltodict/issues/67"&gt;odd parse for same xml structure · Issue #67 · martinblech/xmltodict&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="4h"&gt;4H 折腾明白了:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
/Users/zoomq/mnt/快盘/zScrapBook/reDevRel/scrapbook.rdf
&lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;'RDF:RDF'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
RDF:Seq         579
RDF:Description     24190
NC:BookmarkSeparator    57
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x10f17a660&amp;gt;
        exp_level_idx&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 17073.48084 ms

_chaos/scraotools_reDevRel.pkl
RDF:ROOT            13
RDF:Seq         578
RDF:Description     24190
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 7872.95103 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 191.21003 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有这么多垃圾!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;24190 vs 3631 !!!!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是,居然无法一次性清理干净?!&lt;/p&gt;
&lt;p&gt;一扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
/Users/zoomq/mnt/快盘/zScrapBook/reDevRel/scrapbook.rdf
&lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;'RDF:RDF'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
RDF:Seq         579
RDF:Description     24190
NC:BookmarkSeparator    57
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x10f2376f0&amp;gt;
        exp_level_idx&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 17013.92913 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    11153
cleanned DESC:  13037
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x10eecff60&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 131239.34913 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     13037
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 4292.33599 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    5506
cleanned DESC:  7531
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x108874f60&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 44531.90279 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     7531
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 3115.18502 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    2616
cleanned DESC:  4915
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x105d1edb0&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 19026.94511 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     4915
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 2528.49293 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    1045
cleanned DESC:  3870
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x10429ced0&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 11538.43212 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     3870
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 2422.85681 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    286
cleanned DESC:  3584
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x102c5d300&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 9368.47901 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6扫::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     3584
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 2225.17014 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    10
cleanned DESC:  3574
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x102c2af60&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 8464.92100 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7扫:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python scraptools/zq_chk4scrap.py reDevRel/
_chaos/scraotools_reDevRel.pkl
RDF:ROOT    13
RDF:Seq         578
RDF:Description     3574
NC:BookmarkSeparator    57
        _load_pkl&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 2317.77310 ms

     _RIGHT_NODES: 6926
     RIGHT_NODES: 3631
clean notes:    0
cleanned DESC:  3574
&amp;lt;open file &lt;span class="s1"&gt;'_chaos/scraotools_reDevRel.pkl'&lt;/span&gt;, mode &lt;span class="s1"&gt;'wb'&lt;/span&gt; at 0x1021b3030&amp;gt;
_chaos/scrapbook_reDevRel.rdf
        re_xmltodict_rdf&lt;span class="o"&gt;()&lt;/span&gt; RUNed~ 8694.52500 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2"&gt;2小时 目录对比&lt;/h3&gt;
&lt;p&gt;sh-&amp;gt;ls 出来时,&lt;/p&gt;
&lt;p&gt;是 &lt;span class="caps"&gt;STDOUT&lt;/span&gt; 有隐藏字符! 兰色…居然没有意识到!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;20041214101930&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'str'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;Traceback&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;most&lt;/span&gt; &lt;span class="nt"&gt;recent&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
  &lt;span class="nt"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"scraptools/zq_chk4scrap.py"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt; &lt;span class="nt"&gt;724&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;mv_chaos_data&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;REPO_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;XRDF&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"scraptools/zq_chk4scrap.py"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;line&lt;/span&gt; &lt;span class="nt"&gt;524&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;mv_chaos_data&lt;/span&gt;
    &lt;span class="nt"&gt;print&lt;/span&gt; &lt;span class="nt"&gt;len&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;.strip&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nt"&gt;ValueError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;invalid&lt;/span&gt; &lt;span class="nt"&gt;literal&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;base&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'\&lt;/span&gt;&lt;span class="nt"&gt;x1b&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;x1b&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="nx"&gt;m20041214101930&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;x1b&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;x1b&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="140710-1804"&gt;140710 18:04&lt;/h3&gt;
&lt;p&gt;完成初步完备流程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从原始 scrapbook.rdf 读入为 Py 对象&lt;/li&gt;
&lt;li&gt;模拟肉眼巡查, walk 出显示的合法内容数据集&lt;/li&gt;
&lt;li&gt;加入其它辅助&lt;span class="caps"&gt;KV&lt;/span&gt; 节点,写为中间工作 .pkl&lt;/li&gt;
&lt;li&gt;加载 工作 .pkl 到内存&lt;/li&gt;
&lt;li&gt;对比原始 .rdf 数据中的节点和 walk 出来有效的,逐一清除无效的&lt;ul&gt;
&lt;li&gt;必须,尝试多次,直到清除干净&lt;/li&gt;
&lt;li&gt;为毛…?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对比实际目录和有效节点&lt;span class="caps"&gt;ID&lt;/span&gt; 的关系,将无效的,mv 到其它目录完成净化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="todo"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解决反复清查的问题&lt;/li&gt;
&lt;li&gt;提高效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -hs *
5.1G    ZqDevRel
950M    reDevRel
    5.2G    zqCoder
    4.9G    zqSMM
8.0M    _chaos
4.2G    _stuff

6.5G    ZqFLOSS
    5.2G    zqDevRes
    5.2G    zqPythonic
    5.3G    zqSCM
3.7G    ZqSKM
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scrapbook"></category><category term="python"></category><category term="howto"></category><category term="mavericks"></category></entry><entry><title>pydata笔记:环境配置</title><link href="http://blog.zoomquiet.io/pydata-0-mavericks.html" rel="alternate"></link><updated>2014-06-03T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-06-03:pydata-0-mavericks.html</id><summary type="html">
&lt;h2 id="_1"&gt;背景&lt;/h2&gt;
&lt;p&gt;&lt;img alt="s27157694.jpg（JPEG 图像，300x300 像素）" src="http://img3.douban.com/lpic/s27157694.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://book.douban.com/subject/25779298/"&gt;利用Python进行数据分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是本好书…&lt;/p&gt;
&lt;p&gt;为什么知道这书呢? 因为翻译 &lt;a href="http://weekly.pychina.org/"&gt;|蠎周刊 |汇集全球蠎事儿 !-)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经常见到各种 Pandas 配合其它纯Python 模块折腾出来的大数据可视化分析作品/文章,
而且从 &lt;a href="http://book.douban.com/subject/7175280/"&gt;Python科学计算 (豆瓣)&lt;/a&gt; 中很早
也知道了各种 Python 在数据分析方面的方便, 所以,一直想有机会能实战性的系统折腾一下…&lt;/p&gt;
&lt;p&gt;这书当然注意到了,虽然不是 &lt;span class="caps"&gt;OBP&lt;/span&gt; 项目组织翻译的, 但是,好书就是好书,有点小贵,&lt;/p&gt;
&lt;p&gt;最近有了台 &lt;span class="caps"&gt;GALAXY&lt;/span&gt; &lt;span class="caps"&gt;TAB3&lt;/span&gt;, 所以,能上 Kindle 了,于是,发现 z.cn 上电子书有了,
响应 @老赵的号召,立即收入!&lt;/p&gt;
&lt;h2 id="_2"&gt;探索&lt;/h2&gt;
&lt;p&gt;正如,Python 所有领域的自学,有一个稳定,随时有反馈的环境是最重要的…&lt;/p&gt;
&lt;p&gt;但是,作者的话,真心不能都相信哪!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...如果你恰好使用 Python 3.2 大部分示例是可以完整运行的
...
MAC OS X 环境推荐安装 epd_free-7.3-2-macosx-i386.dmg
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是…&lt;/p&gt;
&lt;h3 id="pyenv"&gt;pyenv&lt;/h3&gt;
&lt;p&gt;先尝试 Python 3.2 环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ pyenv install 3.2&lt;/code&gt; 成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pyenv virtualenv --distribute 3.2 32IPy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pyenc local 32IPy2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pip install ipython&lt;/code&gt;,成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pip install pandas&lt;/code&gt;, 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后回到书中作者的 2.7.3 环境,重新尝试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一样败在 &lt;code&gt;$ pip install pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;宏大的 &lt;code&gt;Matplotlib&lt;/code&gt; 手工安装成功了的哪….&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="epd-free"&gt;&lt;span class="caps"&gt;EPD&lt;/span&gt; free&lt;/h3&gt;
&lt;p&gt;好吧,看来数据分析的系列模块也不是那么简单可以安装的, 所以,&lt;/p&gt;
&lt;p&gt;&lt;a href="https://enthought.com/products/epd/free/"&gt;Enthought Python Distribution Free&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;嗯嗯嗯? &lt;/p&gt;
&lt;p&gt;&lt;img alt="canopy-logo" src="https://enthought.com/static/img/canopy-logo.png"/&gt;&lt;/p&gt;
&lt;p&gt;什么东西,不是说 &lt;code&gt;EPD free&lt;/code&gt; 嘛?&lt;/p&gt;
&lt;p&gt;直接搜索:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epd_free-7.3-2-macosx-i386.dmg&lt;/li&gt;
&lt;li&gt;果断还有: &lt;a href="https://enthought.com/repo/free/"&gt;Index of /repo/free&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;果断下载,安装…&lt;/p&gt;
&lt;p&gt;各种不对味儿,原来自动在 &lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Setting PATH for EPD_free-7.3-2
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;"
export PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而且是按照系统框架来安装到 &lt;code&gt;/Library/Frameworks/Python.framework&lt;/code&gt; 的
可是, Mavericks 以后,没有默认Python 了哪,俺已经同时用 &lt;code&gt;brew&lt;/code&gt; 管理系统 Python,
&lt;code&gt;pyenv&lt;/code&gt; 管理开发 Python ,先不说体积:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ du -hs /Library/Frameworks/Python.framework/Versions
425M    /Library/Frameworks/Python.framework/Versions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;居然第一个案例就跑不起来!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import pandas&lt;/code&gt; 有报错…&lt;/p&gt;
&lt;h3 id="canopy"&gt;Canopy&lt;/h3&gt;
&lt;p&gt;回到官方下载: &lt;a href="https://enthought.com/store/"&gt;Enthought Store&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老老实实的下载推荐的 &lt;code&gt;canopy-1.4.0-osx-64.dmg&lt;/code&gt;
体积也从 74M 爆涨为 &lt;code&gt;235Mb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过,是一派标准的 &lt;span class="caps"&gt;MAC&lt;/span&gt; 软件包了,非常流畅,也有&lt;span class="caps"&gt;GUI&lt;/span&gt; 的引导界面,&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;~/.bash_profile&lt;/code&gt; 追加的是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Added by Canopy installer on 2014-06-03
# VIRTUAL_ENV_DISABLE_PROMPT can be set to '' to make bashprompt show that Canopy is active, otherwise 1
VIRTUAL_ENV_DISABLE_PROMPT=1 source \ 
/Users/zoomq/Library/Enthought/Canopy_64bit/User/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那就简单了,使用标准的 &lt;code&gt;VirtualEnv&lt;/code&gt; 来包装的话,就不用将系统Python 环境永久性的迁移为
&lt;code&gt;Canopy&lt;/code&gt; 的了,&lt;/p&gt;
&lt;p&gt;简单的 在 &lt;code&gt;~/.bashrc&lt;/code&gt; 定义一个别称:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Added by Canopy installer on 2014-06-03
alias canopy="source \
/Users/zoomq/Library/Enthought/Canopy_64bit/User/bin/activate"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随时调用 &lt;code&gt;canopy&lt;/code&gt; 就可以进入了..&lt;/p&gt;
&lt;h2 id="_3"&gt;结论&lt;/h2&gt;
&lt;p&gt;最终拥有了和书中有一致反应的环境:&lt;/p&gt;
&lt;p&gt;&lt;img alt="140604-pydata-canopy.png" src="http://zoomq.qiniudn.com/ZQCollection/snap/140604-pydata-canopy.png"/&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4"&gt;osx - How to uninstall Python 2.7 on a Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.6.4? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7&lt;/li&gt;
&lt;li&gt;sudo rm -rf “/Applications/Python 2.7”&lt;/li&gt;
&lt;li&gt;remove the symbolic links in /usr/local/bin that point to this python version see ls -l /usr/local/bin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/starting/install/osx/"&gt;Installing Python on Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X — The Hitchhiker’s Guide to Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wolfpaulus.com/jounal/mac/installing_python_osx/"&gt;Installing / Updating Python on &lt;span class="caps"&gt;OS&lt;/span&gt; X | Wolf Paulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/goldsmith/7163055"&gt;When I upgraded my Mac to &lt;span class="caps"&gt;OS&lt;/span&gt; X Mavericks, a lot of utilities (like Python, virtualenv, Xcode) broke, and it was pretty stressful trying to get it all set back up. Hopefully this guide can spare you some of that pain.Note: I’m by no means a Linux or Mac ex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mavericks 对 Python 框架的调整,也的确有其原由的…&lt;/p&gt;
&lt;p&gt;当然,好书要配合好代码,&lt;/p&gt;
&lt;p&gt;及时 fork 一个自个儿可以折腾的: &lt;a href="https://github.com/OpenBookProjects/pydata-book"&gt;OpenBookProjects/pydata-book&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140603 完成环境探索,总结&lt;/li&gt;
&lt;li&gt;140527 &lt;a href="http://www.amazon.cn/gp/product/B00KD7Q7U2/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;amp;psc=1"&gt;《利用Python进行数据分析》 Wes McKinney, 唐学韬 (Kindle电子书)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pandas"></category><category term="ipython"></category><category term="pydata"></category><category term="mavericks"></category></entry><entry><title>PythonisT happy guido ;-)</title><link href="http://blog.zoomquiet.io/140106-pycon2013tee-guido.html" rel="alternate"></link><updated>2014-01-07T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2014-01-07:140106-pycon2013tee-guido.html</id><summary type="html">&lt;p&gt;一切开始自2006年!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起初&lt;span class="caps"&gt;ZEUUX&lt;/span&gt; 作&lt;span class="caps"&gt;TEE&lt;/span&gt; 只是为了好玩,而且 Gudio 很喜欢: 有照片为证&lt;a href="http://wiki.woodpecker.org.cn/moin/ObpLovelyPython/LpyAttachZoomq#A.2BTrpyaQ-"&gt;ObpLovelyPython/LpyAttachZoomq - Woodpecker Wiki for &lt;span class="caps"&gt;CPUG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,就没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来, 好容易一个蠎年了! 为了蠎年的 PyCon2013China,&amp;nbsp;启动了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-china.org/topic/544"&gt;蠎年蠎衫(PythonisT-shirt)设计大赛! — Python&amp;nbsp;China&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再然后,&lt;a href="https://twitter.com/stephanie__yu/status/381862928598577152"&gt;Twitter / stephanie__yu: @gvanrossum&amp;nbsp;http://t.co/WSAYnXhbt2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我蠎女神搭讪 Gudio&amp;nbsp;成功&lt;/li&gt;
&lt;li&gt;当年的蠎衫,老爹竟然一直在穿!&lt;/li&gt;
&lt;li&gt;于是又火了四处求购的呼声!&lt;/li&gt;
&lt;li&gt;然后,也没有然后了&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终, 金山赞助了PyCon2013China 珠海+北京场,&amp;nbsp;俺就果断使用了封藏的设计,给所有来参加的行者,送了件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.zhgdg.org/2013-12/et16-pycon-zh/"&gt;PyCon2013China&amp;nbsp;珠海场小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另外,精制了一小批, &lt;span class="caps"&gt;EMS&lt;/span&gt; 给了大会上特别分享了视频的海外 Pythonner&lt;ul&gt;
&lt;li&gt;&lt;a href="http://v.youku.com/v_show/id_XNjQ1OTMzODQw.html"&gt;&lt;span class="caps"&gt;HRYR&lt;/span&gt;:用Python搭建信号采集分析系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://v.youku.com/v_show/id_XNjQ1OTM3MDk2.html"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt;:Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当然有 Guido:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/gvanrossum/status/420249260961968128"&gt;Twitter / gvanrossum: T shift from Chinese user group.&amp;nbsp;&amp;#8230;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="140107-guido-twitter.png（PNG 图像，558x580 像素）" src="http://zoomq.qiniudn.com/CPyUG/zoomquiet-design-collection/140107-guido-twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;以上,有关蠎衫的故事,就是这些,再过12年,又能发生什么?!&lt;/p&gt;
&lt;p&gt;&lt;img alt="design-by zoomquiet " src="http://zoomq.qiniudn.com/CPyUG/zoomquiet-design-collection/favicon/140101-design-by.png" /&gt;&lt;/p&gt;</summary><category term="Guido"></category><category term="Pythonner"></category><category term="PyConChina"></category></entry><entry><title>Python 101: Writing a cleanup script</title><link href="http://blog.zoomquiet.io/py101-cleanup-script.html" rel="alternate"></link><updated>2013-11-23T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-23:py101-cleanup-script.html</id><summary type="html">&lt;p&gt;&lt;a href="http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/"&gt;Python 101: Writing a cleanup script | Bite Sized Python&amp;nbsp;Tips&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So hi there guys! I hope you are fine. So what is in this post? Today we will be writing a cleanup script. The idea for this post came from Mike Driscol who recently wrote a very useful post about writing a cleanup script in python. So how is my post different from his post? In my post I will be using path.py. When I used path.py for the first time I just fell in love with&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="installing-pathpy"&gt;Installing&amp;nbsp;path.py:&lt;/h2&gt;
&lt;p&gt;So there are several ways for installing path.py. Path.py may be installed using setuptools or distribute or pip:
easy_install path.py
The latest release is always updated to the Python Package Index. The source code is hosted on&amp;nbsp;Github.&lt;/p&gt;
&lt;h2 id="finding-the-number-of-files-in-a-directory"&gt;Finding the number of files in a&amp;nbsp;directory:&lt;/h2&gt;
&lt;p&gt;So our first task is to find the number of files present in a directory. In this example we will not iterate over subdirectories instead we will just count the number of files present in the top level directory. This one is simple. Here is my&amp;nbsp;solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;num_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num_files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this script we first of all imported the path module. Then we set the num_file variable to 0. This variable is going to keep count for the number of files in our directory. Then we call the path function with a directory name. Firthermore we iterate over the files present in the root of our directory and increment the num_files variable. Finally we print the value of num_files variable. Here is a litle bit modified version of this script which outputs the number of subdirectories present in the root of our&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;num_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num_dirs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="finding-the-number-of-files-recursively-in-a-directory"&gt;Finding the number of files recursively in a&amp;nbsp;directory:&lt;/h2&gt;
&lt;p&gt;That was easy! Wasn’t it? So now our work is to find the number of files recursively in a directory. In order to acomplish this task we are given the walk() method by path.py. This is the same as os.walk(). So lets write a simple script for recursively listing all files in a directory and its subdirectories in&amp;nbsp;Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;file_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;dir_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;file_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;dir_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;print &amp;#8220;Total number of files == {0}&amp;#8221;.format(file_count)
print &amp;#8220;Total number of directories == {0}&amp;#8221;.format(dir_count)
That was again very easy. Now what if we want to pretty print the directory names? I know there are some terminal one-liners but here we are talking about Python only. Lets see how we can achieve&amp;nbsp;that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;files_loc = {}
file_count = 0
dir_count = 0
total = 0
for i in d.walk():
    if i.isfile():
        if i.dirname().basename() in files_loc:
            files_loc[i.dirname().basename()].append(i.basename())
        else:
            files_loc[i.dirname().basename()] = []
            files_loc[i.dirname().basename()].append(i.basename())
        file_count += 1
    elif i.isdir():
        dir_count += 1
    else:
        pass
    total += 1

for i in files_loc:
    print &amp;quot;|---&amp;quot;+i
    for i in files_loc[i]:
        print &amp;quot;|   |&amp;quot;
        print &amp;quot;|   `---&amp;quot;+i
    print &amp;quot;|&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is nothing fancy here. In this script we are just pretty printing a directory and the files it contains. Now lets&amp;nbsp;continue.&lt;/p&gt;
&lt;h2 id="deleting-a-specific-file-from-a-directory"&gt;Deleting a specific file from a&amp;nbsp;directory:&lt;/h2&gt;
&lt;p&gt;So lets suppose we have a file called this_file_sucks.py. Now how do we delete it. Lets make this seranio more real by saying that we do not know in which directory it is placed. Its simple to solve this problem as well. Just go to the top level directory and execute this&amp;nbsp;script:&lt;/p&gt;
&lt;p&gt;from path import path
d = path(&lt;span class="caps"&gt;DIRECTORY&lt;/span&gt;)&lt;/p&gt;
&lt;h1 id="replace-directory-with-your-desired-directory"&gt;replace directory with your desired&amp;nbsp;directory&lt;/h1&gt;
&lt;p&gt;for i in d.walk():
    if i.isfile():
        if i.name == &amp;#8216;php.py&amp;#8217;:
            i.remove()
In the above script I did not implement any logging and error handling. That is left as an exercise for the&amp;nbsp;reader.&lt;/p&gt;
&lt;h2 id="deleting-files-based-on-their-extension"&gt;Deleting files based on their&amp;nbsp;extension&lt;/h2&gt;
&lt;p&gt;Just suppose you want to remove all the ‘.pyc’ files from the directory. How would you go about dealing with this problem. Here is a solution which I came up with in&amp;nbsp;path.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walkfiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removed {} file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="deleting-files-based-on-their-size"&gt;Deleting files based on their&amp;nbsp;size:&lt;/h2&gt;
&lt;p&gt;So another interesting scenario. What if we want to delete those files which exceed 5Mb&amp;nbsp;size?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NOTE:&lt;/code&gt; There is a difference between Mb and &lt;span class="caps"&gt;MB&lt;/span&gt;. I will be covering Mb here. 
Is it possible with path.py? Yes it is! So here is a script which does this&amp;nbsp;work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d = path(&amp;#39;./&amp;#39;)
del_size = 4522420
for i in d.walk():
    if i.isfile():
        if i.size &amp;gt; del_size:
        #4522420 is approximately equal to 4.1Mb
        #Change it to your desired size
            i.remove()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we saw how we can remove files based on their&amp;nbsp;size.&lt;/p&gt;
&lt;h2 id="deleting-files-based-on-their-last-access-time"&gt;Deleting files based on their last access&amp;nbsp;time&lt;/h2&gt;
&lt;p&gt;In this part we will take a look on how to delete files based on their last access time. I have written the code below to achieve this target. Just change the number of days to anything you like. This script will remove the files which were last modified before the &lt;span class="caps"&gt;DAYS&lt;/span&gt;&amp;nbsp;variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;#Change the DAYS to your liking&lt;/span&gt;
&lt;span class="n"&gt;DAYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Replace DIRECTORY with your required directory&lt;/span&gt;
&lt;span class="n"&gt;time_in_secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DAYS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mtime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;time_in_secs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we have also learned how to remove files based on their last modified time. If you want to delete files based on last access time just change i.mtime to i.atime and you will be good to&amp;nbsp;go.&lt;/p&gt;
&lt;h2 id="goodbye"&gt;Goodbye&lt;/h2&gt;
&lt;p&gt;So that was it. I hope you liked the post. In the end I would like to make a public apology that my English is not good so you may find some grammar mistakes. You are requested to email them to me so that I can improve my English. If you liked this post then don’t forget to follow me on twitter and facebook. A retweet won’t hurt either! If you want to send me a pm then use this&amp;nbsp;email.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140125 翻译 Weekly issue:99.5&amp;nbsp;时发现,转抄学习&lt;/li&gt;
&lt;/ul&gt;</summary><category term="wordpress"></category><category term="101"></category><category term="Zh"></category></entry><entry><title>Letter to a young programmer</title><link href="http://blog.zoomquiet.io/guido-letter-2-young.html" rel="alternate"></link><updated>2013-11-11T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-11:guido-letter-2-young.html</id><summary type="html">&lt;p&gt;&lt;img alt="guido" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*2m0OBPBnBJu0WrobbfnBkg.png" /&gt;
~ Guido van Rossum (inventor of&amp;nbsp;Python)&lt;/p&gt;
&lt;h1 id="letter-to-a-young-programmer"&gt;&lt;a href="http://neopythonic.blogspot.ca/2013/10/letter-to-young-programmer.html"&gt;Letter to a young&amp;nbsp;programmer&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Dear (insert name&amp;nbsp;here),&lt;/p&gt;
&lt;p&gt;I heard you enjoy a certain programming language named Python. Programming is a wonderful activity. I am a little jealous that you have access to computers at your age; when I grew up I didn’t even know what a computer was! I was an electronics hobbyist though, and my big dream was to build my own electronic calculator from discrete components. I never did do that, but I did build several digital clocks, and it was amazing to build something that complex and see it work. I hope you dream big too — programmers can make computers (and robots!) do amazing things, and this is a great time to become a programmer. Just imagine how much faster computers will be in five or ten years, and what you will be able to do with your skills&amp;nbsp;then!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;—Guido van Rossum (inventor of Python)
THURSDAY, OCTOBER 24, 2013
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从
&lt;a href="http://us4.campaign-archive1.com/?u=9735795484d2e4c204da82a29&amp;amp;id=c8c36205c4"&gt;Pycoder’s Weekly (Issue #89): Mavericks&lt;/a&gt;
知道的 Guido&amp;nbsp;好萌信,`&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试翻译一下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;亲:

目测你正在享受一种叫Python 的编程语言.
编程是种美妙的体验.
俺很有点羡慕嫉妒恨你们 !在这个年龄就能接触电脑.
俺那会儿子,甚至不知道什么是计算机!
俺算一个电子爱好者,那时,最大的梦想是,亲手完成一个计算元件.
俺从未作到这点.
不过,倒是完成了几件数字时钟,
每当见到如此复杂的东西,终于能工作时,哗! 那种感觉,,,
俺期望你的梦想也足够大 —
程序可以控制计算机(机械人)做出令人惊叹的事儿,
这是个令程序员伟大的时代.
现在就设想,5到10年后,能运用你的功能操作更快的计算机作到什么?!

哗…
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131027 pub. &lt;a href="https://medium.com/i-m-h-o/e701a9dc714e"&gt;Letter to a young programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="OSS"></category><category term="Think"></category><category term="China"></category></entry><entry><title>EKR to Chinese programmer</title><link href="http://blog.zoomquiet.io/ekr-selfintro-for-chinese.html" rel="alternate"></link><updated>2013-11-06T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:blog.zoomquiet.io,2013-11-06:ekr-selfintro-for-chinese.html</id><summary type="html">&lt;h1 id="leo"&gt;Leo&amp;nbsp;作者向中国开发者的自述&lt;/h1&gt;
&lt;p&gt;&lt;img alt="EKR" src="https://d262ilb51hltx0.cloudfront.net/max/700/1*yKVZtcJyfh-FHNEtXrqjPw.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://leoeditor.com/"&gt;Leo&lt;/a&gt; is OpenSource,written by Python,can run in M$/Linux/&lt;span class="caps"&gt;MAC&lt;/span&gt;/etc. ,Leo is Literate Environment Outline-oriented ;-)
&lt;span class="caps"&gt;EKR&lt;/span&gt; is her&amp;nbsp;father.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, what is “Literate” ,is hard to explained,
i try and try and try to show/share to Chinese People, &lt;span class="caps"&gt;BUT&lt;/span&gt;…
next week,there is another chance for try again, and ask &lt;span class="caps"&gt;EKR&lt;/span&gt; say some abt. self…
So! &lt;span class="caps"&gt;EKR&lt;/span&gt; writed down his colorful&amp;nbsp;life!&lt;/p&gt;
&lt;p&gt;​I’ve been interested in computers from the time I was about 10 years&amp;nbsp;old.&lt;/p&gt;
&lt;p&gt;I studied mathematics at Michigan State University and computer science at the University of Wisconsin, Madison. There I meant my friend and mentor, &lt;span class="caps"&gt;D.R.&lt;/span&gt;(Bob) Fitzwater. Bob encouraged me to focus more on design, less on the “bits”. He died several years ago—he would have enjoyed what has happened&amp;nbsp;since.&lt;/p&gt;
&lt;p&gt;When I first learned to program, my programs were “brittle”: changing one part would break another. For several years I wanted to know how to solve this&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;My first programming job was at &lt;span class="caps"&gt;IBM&lt;/span&gt; in Kingston New York. This was about 1974. I didn’t like corporate culture. The problem was my own immaturity, not the people at &lt;span class="caps"&gt;IBM&lt;/span&gt;. Still, I’m happy I&amp;nbsp;left.&lt;/p&gt;
&lt;p&gt;While at &lt;span class="caps"&gt;IBM&lt;/span&gt; I studied the ideas of people like Edsjer Dijkstra and especially the great David L. Parnas. Parnas was writing before languages had classes. In fact, his ideas are the reason that Leo’s classes have remained unchanged in concept even though they have been rewritten many&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;I left &lt;span class="caps"&gt;IBM&lt;/span&gt; after less than a year. For a while I owned a computer store in Madison Wisconsin, where I have lived ever since. The store didn’t turn out too&amp;nbsp;well…&lt;/p&gt;
&lt;p&gt;I married Rebecca in 1980, and we have been a happy team ever since. Leo would not have been born without her. Rebecca and I have two children, James and Linda. James is 30, Linda&amp;nbsp;23.&lt;/p&gt;
&lt;p&gt;About this time I started a computer business selling Sherlock, a tracing tool for C programs:&amp;nbsp;https://sourceforge.net/projects/leo/files/Miscellaneous/Sherlock/ &lt;/p&gt;
&lt;p&gt;I received a patent for it, but the business went nowhere. Sherlock is not needed for tracing Python programs: the pattern used in Leo suffices.
The ideas behind Sherlock really ought to be part of Python’s logging framework. Levels of logging are feeble compared to individually named and targeted&amp;nbsp;logs.&lt;/p&gt;
&lt;p&gt;I worked (from home) for about a year for a company called Tuple in Ballard, Washington. I wrote (in C) a very fast optimizing C compiler, assembler, linker and unix-like file system for them. See the &lt;span class="caps"&gt;CC2&lt;/span&gt; stuff at: 
https://sourceforge.net/projects/leo/files/Miscellaneous/&lt;span class="caps"&gt;CC2&lt;/span&gt;%20and%20Psyco/&lt;/p&gt;
&lt;p&gt;This was before the days of unit tests! At that time, having the compiler compile itself was pretty much how testing was&amp;nbsp;done!&lt;/p&gt;
&lt;p&gt;I’ve been a fan of Donald Knuth ever since graduate school. I studied his books about&amp;nbsp;TeX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Volume A, The TeXbook (Reading, Massachusetts: Addison-Wesley, 1984), x+483pp. 
ISBN 0-201-13447-0

Volume B, TeX: The Program (Reading, Massachusetts: Addison-Wesley, 1986), xviii+600pp. ISBN 0-201-13437-3

Volume B is written in Pascal(!) and organized (if you can call it that) using Knuth’s WEB system. I studied WEB intensely.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite understanding bits and pieces of the 600-page code in volume B, I really didn’t understand the code. I asked myself, why is this so hard to understand? After perhaps 6 months of wondering, the basis of Leo came to me: webs are outlines in disguise. Actually, &lt;em&gt;all&lt;/em&gt; programs are outlines in&amp;nbsp;disguise.&lt;/p&gt;
&lt;p&gt;You can read about the rest of Leo’s history here:&amp;nbsp;http://leoeditor.com/appendices.html#history-of-leo&lt;/p&gt;
&lt;p&gt;I learned about Python in 2001. I was working on the Python version of Leo on September&amp;nbsp;11.&lt;/p&gt;
&lt;p&gt;Two years ago I got interested in Guido’s keynote about static type checking. I contacted him and started this project:&amp;nbsp;https://groups.google.com/forum/#!forum/python-static-type-checking&lt;/p&gt;
&lt;p&gt;I spent lots of time learning how to traverse parse trees quickly. That’s not nothing, but it’s only the beginning of the task. Perhaps next year I’ll be able to do for type analysis what I did for traversing parse trees&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;​
And that’s about it. I’ve ever only been interested in programming. I love seeing how other people use Leo, but such excursions are not for me. I remain interested in programming because it has never been easy for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I am a mediocre wei chi player, despite many lessons from Yang Yi-Lun 杨以伦, pro 7 dan: 
https://en.wikipedia.org/wiki/Yilun_Yang 
I do know enough to appreciate famous&amp;nbsp;games. &lt;/p&gt;
&lt;p&gt;One of my favorites was played between the two great rivals Go Seigen 吳清源 and Kitani Minoru 木谷 実 on March 20, 1932. 
Go Seigen won by resignation, despite losing about 25&amp;nbsp;stones.&lt;/p&gt;
&lt;p&gt;I play the piano and take lessons from a great musician, Michael Butkus-Bomier: http://www.michaelbb.info/
I enjoy painting. About 20 years ago I received a black belt in&amp;nbsp;karate.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTH&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;试译如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;10岁开始,俺就对计算机上了心.&lt;/p&gt;
&lt;p&gt;俺是密歇根州立大学数学系的,也是威斯康星大学麦迪逊学院计算机系的.在那儿,遇到了俺的导师(Bob) Fitzwater教授,他建议俺多关注设计,而不仅仅是”字节”.
几年前,Bob&amp;nbsp;已仙去,不过,他要是知道俺在折腾什么一定会很高兴.&lt;/p&gt;
&lt;p&gt;开始编程时,俺的程序特色是”脆”:某处囧了,另外的也会杯具.&amp;nbsp;那些年俺一直在想法解决这种事儿!&lt;/p&gt;
&lt;p&gt;俺第一份程序猿工作是在1974年进入 &lt;span class="caps"&gt;IBM&lt;/span&gt; (Kingston New York). 俺并不喜欢企业文化,当然问题在俺不在 &lt;span class="caps"&gt;IBM&lt;/span&gt;,&amp;nbsp;总之很高兴俺及时离开了.&lt;/p&gt;
&lt;p&gt;有&lt;span class="caps"&gt;IBM&lt;/span&gt; 俺接触到象 Edsjer Dijkstra 或是 伟大的 David L. Parnas 们的想法.Parnas写的书面语言类, 诱发了 Leo&amp;nbsp;的类概念无论怎么重写都不会改变!&lt;/p&gt;
&lt;p&gt;离开 &lt;span class="caps"&gt;IBM&lt;/span&gt;&amp;nbsp;快一年时.有一阵子,俺在威斯康星的麦迪逊那儿有个电脑店.事儿并不忙…&lt;/p&gt;
&lt;p&gt;1980年,俺同 Rebecca 结婚了,从此有了俺自个儿的快乐团队.如果没有她, Leo 也诞生不出来. Rebecca 和俺有两个娃儿,James 和 Linda. 现在 James 30, Linda&amp;nbsp;23.&lt;/p&gt;
&lt;p&gt;大约这时期,俺开始销售 Sherlock, 针对C程序的追踪工具.: https://sourceforge.net/projects/leo/files/Miscellaneous/Sherlock/
俺拥有相关专科,但是没什么业务.Sherlock 没必要对 Python 程序进行追踪: Leo 足够用了!
Sherlock背后的想法的确出自Python&amp;nbsp;的日志框架.分级的日志绝对比苍白的命名式日志要好用的多.&lt;/p&gt;
&lt;p&gt;俺为华盛顿一家名为”Tuple in Ballard”的公司&lt;span class="caps"&gt;SOHO&lt;/span&gt; 了一年, 写(用C)了些很快的编译器,汇编器,链接器,以及 Unix样的文件系统.参考 &lt;span class="caps"&gt;CC2&lt;/span&gt;: https://sourceforge.net/projects/leo/files/Miscellaneous/&lt;span class="caps"&gt;CC2&lt;/span&gt;%20and%20Psyco/&amp;nbsp;这儿是几天前的集成测试结果!当时,编译过编译器自身比跑通测试重要的多.&lt;/p&gt;
&lt;p&gt;毕业以来,俺一直是高纳德的粉丝. 学习过他有关TeX&amp;nbsp;的书.包括:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;卷A，TeXbook（阅读，马萨诸塞州：Addison-Wesley出版社，1984），X+483页。 ISBN0-201-13447-0

卷B, TEX:程序（阅读，马萨诸塞州：Addison-Wesley出版社，1986），18+600页。 ISBN0-201-13437-3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;B卷是用 Pascal(!) 完成并组织的(甚至于可以调用它),运用了 高纳德的 &lt;span class="caps"&gt;WEB&lt;/span&gt; 系统.俺立即对 &lt;span class="caps"&gt;WEB&lt;/span&gt;&amp;nbsp;系统着迷了.&lt;/p&gt;
&lt;p&gt;尽管对卷B 600多页中散布的代码进行了反复理解,依然一头雾水.俺反问自个儿,有这么难嘛?又过了大约半年, 完成了 Leo&amp;nbsp;的主要部分后,回过味儿来:&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;WEB&lt;/span&gt; 就是变形的大纲&amp;nbsp;事实上:&lt;/p&gt;
&lt;p&gt;一切程序都是大纲的变形 !
Leo 其余的历史可以在这儿查阅:&amp;nbsp;http://leoeditor.com/appendices.html#history-of-leo&lt;/p&gt;
&lt;p&gt;俺在2001 年才学的 Python.同年9月11日开始,就用Python 来构建 Leo&amp;nbsp;了.&lt;/p&gt;
&lt;p&gt;两年前俺关注到 Guido 有关静态类型检查的报告.于是联系上他启动了这个项目:&amp;nbsp;https://groups.google.com/forum/#!forum/python-static-type-checking&lt;/p&gt;
&lt;p&gt;俺花了大量的时间来学习如何快速遍历语法树.这不算什么事儿,但却是此任务的必然起点. 也许明年俺能基于语法树开展类型分析了&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;(嚓! 王珢的 https://github.com/yinwang0/pysonar2 已经折腾很&lt;span class="caps"&gt;NB&lt;/span&gt;&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;是也乎,俺就是对编程感兴趣.俺喜欢见证大家对 Leo 的喜爱,&amp;nbsp;但是,这不会是俺的一切.俺保持编程的兴趣,因为对俺这从来不是简单的事儿.&lt;/p&gt;
&lt;p&gt;俺是名普通的围棋爱好者, 从 Yang Yi-Lun (杨以伦)那儿学了很多, pro 7 dan: https://en.wikipedia.org/wiki/Yilun_Yang
俺能欣赏历史上知名的对弈, 其中最喜欢的是 1932年3月20号 吳清源 同 木谷 実(Kitani Minoru)的对战.尽管少了25颗棋子,但吳清源最终赢了!
俺也弹钢琴,并学习了伟大的 Michael Butkus-Bomier 的课程: http://www.michaelbb.info/
俺也享受绘画.&amp;nbsp;另外20年前,俺也拿到了空手道的黒带.&lt;/p&gt;
&lt;p&gt;以上.&lt;/p&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140107 move into Pelican as&amp;nbsp;zoomquiet.io&lt;/li&gt;
&lt;li&gt;131106 pub. &lt;a href="https://medium.com/i-m-h-o/9520fee0b59f"&gt;&lt;span class="caps"&gt;EKR&lt;/span&gt; to Chinese programmer — &lt;span class="caps"&gt;I. M. H. O.&lt;/span&gt;—&amp;nbsp;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="EKR"></category><category term="Leo"></category><category term="PyConChina"></category><category term="Zh"></category></entry></feed>